{"version":3,"sources":["webpack://Cortona3DSoloTag/webpack/universalModuleDefinition","webpack://Cortona3DSoloTag/webpack/bootstrap","webpack://Cortona3DSoloTag/B:/JSPS-SOLO-JOB1/packages/solo-tag/src/index.js","webpack://Cortona3DSoloTag/B:/JSPS-SOLO-JOB1/packages/solo-core/src/res/stella.framework.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Stella","Cortona3DSolo","tag","use","then","events","config","useBackwardCompatibilityMode","on_fragment_loaded","on_section_loaded","on_section_unloaded","on_click_object","on_over","Model3D","instance","dispatch","stella","kDotDefaults","areaData","color","location","Vec3f","normal","sectionID","shapeType","structureClass","texture","type","viewpointOrientation","Rotation","viewpointPosition","m_itemsBeingLoaded","Map","kDotTypeNames","kPredefinedViews","lastFlashedDot","newbornDot","isPlotMode","Viewpoint","position","orientation","center","defineProperties","this","set","Array","isArray","float3_asVec3f","HEAPF32","float4_asRotation","float3Array_asArray","addr","count","items","push","float3_fromObject","obj","x","y","z","float3_fromVec3f","float4_fromRotation","rotation","angle","defaultToString","constructor","f","getMidpointWithZ","midpoints","length","RepairDot","id","writable","configurable","_peer","_dotWillChangeID","dotGetState","dot","vertices","surfaceVertices","surfaceIndices","textureProperties","dotDidDetachFromModel","_state","Module","_stella_model_removeRepairDot","_stella_item_release","SectionFragment","url","structures","structuresCollection","state","disabled","loaded","peer","defineReadOnlyCollection","section","_stella_fragment_release","_stella_section_getFragment","fragments","indexOf","ccall","Section","fasteners","forEach","fragment","itemID","item","has","callback","structure","find","concat","toArray","translation","zones","hidden","_attachToSection","getClosestSectionStructures","sectionImpl","maxDistance","method","structureClasses","sp","stackSave","carray","stackAlloc","HEAPU32","intArrayFromString","res","stackRestore","itemCount","UTF8ToString","_free","getStructureClassFromName","substr","Structure","_stella_item_retain","StructureClass","SKIN_STRUCTURE_LIST","LAYER_STRUCTURE_LIST","impl","values","repairDots","sections","repairDotsCollection","model","_stella_dot_create","_stella_model_addRepairDot","dotDidAttachToModel","sectionsCollection","addSection","removeSection","removeAllSections","structureClassesCollection","fastenerHighlightPool","fastenerHighlights","fastenerHighlightColor","fastenerHighlightGroup","fastenerHighlightShapeNode","createNode","syntax","nodes","node","pickerHit_asObject","itemWithPeer","pickerHits_asArray","hits","hit","valueWithPeer","_stella_item_getType","_stella_element_getSection","fragmentIndex","_stella_element_getFragmentIndex","layersWithElementCollection","collection","hasWeights","layers","className","weight","sort","a","b","localeCompare","fragmentWithIndex","sectionPeer","index","DEFAULT_TRANSPARENCY_LEVEL","SKIP_TRANSPARENT_OBJECT","SKIP_TRANSPARENT_OBJECT_ON_CLICK","DOT_FLASH_INTERVAL","DOT_FLASH_FREQUENCY","ALL_CLASS_VISIBLE_ON_LOAD","FASTENER_LAYER","DOT_TO_STRUCTURE_DISTANCE","AC_SCALE_FACTOR","areaContourOffset","areaSurfaceOffset","maxAreaEdgeLength","fastenerSearchRadius","areaFastenerSearchRadius","fastenerHighlightRadius","_stella_model_getDotAppearance","_stella_model_setDotAppearance","_stella_model_areRepairDotsHidden","_stella_model_setRepairDotsHidden","Promise","reject","Error","promise","resolve","fragmentCount","peers","_stella_section_release","_acquirePeer","_url","_stella_model_addSection","_stella_section_setTranslation","_stella_section_setRotation","_stella_section_setHidden","sectionDidAttachToModel","allSettled","_load","_releasePeer","_unload","_stella_model_removeSection","_rebuildStructures","unhighlightFasteners","sectionDidDetachFromModel","context","delete","add","remove","clear","dotID","_stella_model_getNewbornDot","_stella_item_getID","dotType","_stella_model_endPlotMode","_stella_model_buildAreaDot","_stella_model_removeLastAreaPoint","repairDot","pt","list","_stella_model_copyNearestElementList","hasStructures","HEAP32","skipTransparent","names","getNearestStructures","slice","animated","String","_stella_model_fitSceneWithPredefinedView","data","vp","_stella_dot_getViewpoint","HEAPU8","subarray","_stella_item_getCenter","_tiramisu_setCameraProperties","stopFlash","flash","_stella_model_fitItem","valid","adjustCamera","array","float3_fromArray","_stella_model_setRotationCenter","_stella_model_alignCamera","_stella_model_fitScene","_tiramisu_isOrthographicCamera","isOrthographic","_stella_model_setCameraType","typeID","sz","allocateUTF8","result","_stella_model_registerDotShape","scale","_stella_model_registerRepairDotTexture","_stella_model_setMarkerDotShape","error","success","_didFinishLoad","elements","classNames","isSkin","isLayer","dotsHidden","fragmentPeer","getObjectList","_stella_model_copyStructureClassList","newID","existingDot","modifierKeys","topmostLocation","radius","getStructuresInSphere","getStructuresAcrossFuselage","structureName","getDistanceToPoint","Math","min","_stella_model_getModelRotation","_stella_model_setModelRotation","options","transparencyThreshold","_stella_model_pickItem","ray","rayData","origin","direction","_stella_model_pickItemWithRay","_stella_model_pickItems","_stella_model_pickItemsWithRay","query","_stella_model_getVisibleItems","results","locationVec","offsetVec","midpointCount","mp","_stella_model_getLayersAtLocation","_stella_model_getLayersForRepairDot","getFastenerAtLocation","getFastenersForRepairDot","_tiramisu_restoreObjectProperty","_tiramisu_setObjectPropertyf","unusedFasteners","fastener","_tiramisu_setObjectVisibility","offsets","pop","_tiramisu_addObject","_tiramisu_setObjectIgnorableByPicker","join","offset","AirplaneBoundBox","AirplaneFuselageLocation","size","bsta","bwl","bbl","BSTA","BWL","BBL","SectionZones","xmlURL","wrlURL","pendingVisibleZones","setZoneVisibility","doc","zoneID","visible","zone","selectSingleNode","shapes","selectNodes","nodeValue","toSection","_document","splice","loadXMLDocument","document","errorText","Metadata","dom","onload","onerror","xhr","XMLHttpRequest","open","responseType","overrideMimeType","status","responseXML","statusText","send","floatAttribute","v","getAttribute","parseFloat","Fastener","metadata","ATA","ata","description","arguments","setAxis","FLT_EPSILON","normalize","v1","axis","cross","len","PI","atan2","str","bulk","split","_tiramisu_getCameraProperties","_stella_dot_copyAreaData","float3_asArray","_stella_dot_getColor","_stella_dot_setColor","_stella_dot_getLocation","_stella_dot_setLocation","_stella_dot_getNormal","_stella_dot_setNormal","_stella_dot_getShapeType","_stella_dot_setShapeType","_stella_dot_getTextureType","_stella_dot_setTextureType","_stella_dot_getType","_stella_dot_setType","_stella_dot_getSectionID","_stella_dot_getStructureClass","vec","_stella_dot_setViewpoint","rot","_stella_item_isHidden","_stella_item_setHidden","_stella_item_isHighlighted","highlight","_stella_item_setHighlighted","duration","frequency","_stella_dot_flash","_stella_dot_cancelFlash","dolly","_stella_dot_getAreaDataComponent","_stella_dot_getAreaDataComponentSize","intArray_asArray","floatArray_asArray","_stella_item_getNode","_stella_fragment_isDisabled","_stella_fragment_setDisabled","isLoaded","_stella_fragment_getNode","_stella_section_isHidden","_stella_section_getTranslation","_stella_section_getRotation","_stella_section_areRepairDotsHidden","_stella_section_setRepairDotsHidden","transparency","_stella_section_setTransparency","bestFastener","left","right","middle","floor","_projection","minDistance","failureCount","j","abs","dx","dy","dz","sqrt","vertexCount","contourOffset","start","isArea","bestFasteners","max","counter","f1","f2","searchRadius","best","distanceToSegment","_stella_section_getNode","repairDotsHidden","restoreTransparency","_stella_element_getTransparency","_stella_element_setTransparency","highlighted","_stella_element_setColor","_stella_element_restoreColor","point","_stella_element_getDistanceToPoint","restoreColor","Element","xpath","ownerDocument","evaluate","XPathResult","FIRST_ORDERED_NODE_TYPE","singleNodeValue","ORDERED_NODE_ITERATOR_TYPE","iterateNext","XMLDocument","fromXMLNode","xmlNode","isInside","airplaneFuselageLocation","isEmpty","toString","attributeAssoc","attributes","exception","getBLSideString","elementName","hasElementName","zonesWithItem","boxes","planes","inside","k","nearestZone","shortestDistance","boxDistance","acceptablePlanes","sectionCodeToId","sectionCode","isAvailable","sectionIdToCode","code","documentElement","load","base_path","replace","self","errorMessage","getOffsetForSection","getSectionOffset","coordAirplaneFuselageToVRML","coordVRMLToAirplaneFuselage","coordBSTAToExtendedBSTA","precision","insertions","ins","lastBefore","firstAfter","dist","toFixed","tagName","frames","delta","e","coordExtendedBSTAToBSTA","arr","toUpperCase","base","isNaN","plus","srcLetter","substring","foundPlus","foundLetter","width","letter","getSectionBB","getSectionBoundingBox","bbox","getAirplaneSectionsForLocation","getFuselageSectionsForLocation","chooseViewpoint","cv","viewpoint","_stella_utility_getBestViewpoint","getATAForZone","sectionZones","assoc","getSectionId","getAllElementsInZone","sectionNode","keys","getItemDescription","getSectionMidpoints","getSectionFasteners","fastenerdata","fastenerXMLPath","metasets","metasetNode","metaset","meta","sin","cos","g","h","Sa","Ca","As","getAxis","multiply","Sb","Cb","Bs","Cab","ABs","msq","Sab","divide","abx","aby","abz","apx","apy","apz","bpx","bpy","bpz","cx","cy","cz"],"mappings":"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","file":"Cortona3DSoloTag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Cortona3DSoloTag\"] = factory();\n\telse\n\t\troot[\"Cortona3DSoloTag\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * The namespace represents an application interface to provide <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * \r\n * @example\r\n * Cortona3DSolo.use('tag');\r\n * Cortona3DSolo.app.initialize()\r\n *     .then(function () {\r\n *          // Use Cortona3D Tag JavaScript API here.\r\n *          var m_model3D = new Cortona3DSolo.tag.Model3D();\r\n *          // ...\r\n *          // By default, events of the Model3D object are translated as \"tag.*\" events of the Solo library.\r\n *          Cortona3DSolo.on('tag.onSectionLoaded', function (section) {\r\n *              // ...\r\n *          });\r\n *     });\r\n * \r\n * @example <caption>Using backward compatibility mode</caption>\r\n * // For backward compatibility, you can use the \"useBackwardCompatibilityMode\" option of the \"tag\" module.\r\n * Cortona3DSolo.use('tag', {\r\n *      useBackwardCompatibilityMode: true\r\n * });\r\n * Cortona3DSolo.app.initialize()\r\n *     .then(function () {\r\n *          // Use Cortona3D Tag JavaScript API here.\r\n *          // All properties of the \"Cortona3DSolo.tag\" namespace are exported to the global object.\r\n *          var m_model3D = new Model3D();\r\n *          // ...\r\n *          // Event handlers from the Model3D object must be used instead of \"tag.*\" events of the Solo library.\r\n *          m_model3D.on_section_loaded = function (section) {\r\n *              // ...\r\n *          };\r\n *     });\r\n * \r\n * @namespace tag\r\n * @memberof module:solo\r\n * @since 1.7.2\r\n */\r\nvar Stella = require('@cortona3d/solo-core/src/res/stella.framework');\r\n\r\nif (typeof Cortona3DSolo != 'undefined') {\r\n    Cortona3DSolo.tag = Stella;\r\n\r\n    Cortona3DSolo.use('tag')\r\n        .then(function (module) {\r\n            var key,\r\n                events;\r\n            if (module.config.useBackwardCompatibilityMode) {\r\n                // Import properties from the Stella namespace to the global object for the sake of backward compatibility.\r\n                for (key in Stella) {\r\n                    window[key] = Stella[key];\r\n                }\r\n            } else {\r\n                // Use Solo events instead of Stella.Model3D hook methods.\r\n                events = {\r\n                    on_fragment_loaded: 'tag.onFragmentLoaded',\r\n                    on_section_loaded: 'tag.onSectionLoaded',\r\n                    on_section_unloaded: 'tag.onSectionUnloaded',\r\n                    on_click_object: 'tag.onClickObject',\r\n                    on_over: 'tag.onOver'\r\n                };\r\n\r\n                for (key in events) {\r\n                    Object.defineProperty(Stella.Model3D.instance, key, {\r\n                        value: Cortona3DSolo.dispatch.bind(Cortona3DSolo, events[key]),\r\n                        enumerable: true\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n}\r\n\r\n/**\r\n * The hook method is invoked when the 3D model of the Section fragment is loaded.\r\n * Used instead of the `on_fragment_loaded` event handler from the `Model3D` namespace.\r\n * \r\n * @memberof module:solo.tag\r\n * @abstract \r\n * @function onFragmentLoaded\r\n * @param {module:solo.tag.SectionFragment} fragment\r\n * @see The corresponding event {@link event:\"tag.onFragmentLoaded\" \"tag.onFragmentLoaded\"}\r\n */\r\n/**\r\n * @event \"tag.onFragmentLoaded\"\r\n * @see The corresponding hook method {@link module:solo.tag.onFragmentLoaded tag.onFragmentLoaded()}\r\n */\r\n\r\n/**\r\n * The hook method is invoked when the airplane section is loaded.\r\n * Used instead of the `on_section_loaded` event handler from the `Model3D` namespace.\r\n * \r\n * @memberof module:solo.tag\r\n * @abstract \r\n * @function onSectionLoaded\r\n * @param {module:solo.tag.Section} section\r\n * @see The corresponding event {@link event:\"tag.onSectionLoaded\" \"tag.onSectionLoaded\"}\r\n */\r\n/**\r\n * @event \"tag.onSectionLoaded\"\r\n * @see The corresponding hook method {@link module:solo.tag.onSectionLoaded tag.onSectionLoaded()}\r\n */\r\n\r\n/**\r\n * The hook method is invoked when the 3D model of the section is unloaded.\r\n * Used instead of the `on_section_unloaded` event handler from the `Model3D` namespace.\r\n * \r\n * @memberof module:solo.tag\r\n * @abstract \r\n * @function onSectionUnloaded\r\n * @param {module:solo.tag.Section} section\r\n * @see The corresponding event {@link event:\"tag.onSectionUnloaded\" \"tag.onSectionUnloaded\"}\r\n */\r\n/**\r\n * @event \"tag.onSectionUnloaded\"\r\n * @see The corresponding hook method {@link module:solo.tag.onSectionUnloaded tag.onSectionUnloaded()}\r\n */\r\n\r\n/**\r\n * The hook method is invoked when the user clicks an object in the 3D window.\r\n * Used instead of the `on_click_object` event handler from the `Model3D` namespace.\r\n * \r\n * @memberof module:solo.tag\r\n * @abstract \r\n * @function onClickObject\r\n * @param {module:solo.tag.Vec3f} location\r\n * @param {module:solo.tag.Structure|module:solo.tag.RepairDot} item\r\n * @param {number} button\r\n * @param {number} modifierKeys\r\n * @see The corresponding event {@link event:\"tag.onClickObject\" \"tag.onClickObject\"}\r\n */\r\n/**\r\n * @event \"tag.onClickObject\"\r\n * @see The corresponding hook method {@link module:solo.tag.onClickObject tag.onClickObject()}\r\n */\r\n\r\n/**\r\n * The hook method is invoked when the user moves the cursor over the 3D window.\r\n * Used instead of the `on_over` event handler from the `Model3D` namespace.\r\n * \r\n * @memberof module:solo.tag\r\n * @abstract \r\n * @function onOver\r\n * @param {module:solo.tag.Vec3f} location Location on the first opaque object\r\n * @param {module:solo.tag.Structure|module:solo.tag.RepairDot|null} item The first opaque object\r\n * @param {module:solo.tag.Vec3f} topmostLocation Location on the first object (including semi-transparent)\r\n * @see The corresponding event {@link event:\"tag.onOver\" \"tag.onOver\"}\r\n */\r\n/**\r\n * @event \"tag.onOver\"\r\n * @see The corresponding hook method {@link module:solo.tag.onOver tag.onOver()}\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Viewpoint.html\">Viewpoint</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Viewpoint\r\n * @see <a href=\"Tag/Viewpoint.html\">Viewpoint</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/RepairDot.html\">RepairDot</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class RepairDot\r\n * @see <a href=\"Tag/RepairDot.html\">RepairDot</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/RepairDots.html\">RepairDots</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class RepairDots\r\n * @see <a href=\"Tag/RepairDots.html\">RepairDots</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/SectionFragment.html\">SectionFragment</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class SectionFragment\r\n * @see <a href=\"Tag/SectionFragment.html\">SectionFragment</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Section.html\">Section</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Section\r\n * @see <a href=\"Tag/Section.html\">Section</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Sections.html\">Sections</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Sections\r\n * @see <a href=\"Tag/Sections.html\">Sections</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Structure.html\">Structure</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Structure\r\n * @see <a href=\"Tag/Structure.html\">Structure</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Structures.html\">Structures</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Structures\r\n * @see <a href=\"Tag/Structures.html\">Structures</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/StructureClass.html\">StructureClass</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class StructureClass\r\n * @see <a href=\"Tag/StructureClass.html\">StructureClass</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/StructureClasses.html\">StructureClasses</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class StructureClasses\r\n * @see <a href=\"Tag/StructureClasses.html\">StructureClasses</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Model3D.html\">Model3D</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Model3D\r\n * @see <a href=\"Tag/Model3D.html\">Model3D</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/AirplaneBoundBox.html\">AirplaneBoundBox</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class AirplaneBoundBox\r\n * @see <a href=\"Tag/AirplaneBoundBox.html\">AirplaneBoundBox</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/AirplaneFuselageLocation.html\">AirplaneFuselageLocation</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class AirplaneFuselageLocation\r\n * @see <a href=\"Tag/AirplaneFuselageLocation.html\">AirplaneFuselageLocation</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/SectionZones.html\">SectionZones</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class SectionZones\r\n * @see <a href=\"Tag/SectionZones.html\">SectionZones</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Metadata.html\">Metadata</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Metadata\r\n * @see <a href=\"Tag/Metadata.html\">Metadata</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Fastener.html\">Fastener</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Fastener\r\n * @see <a href=\"Tag/Fastener.html\">Fastener</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/ATA.html\">ATA</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class ATA\r\n * @see <a href=\"Tag/ATA.html\">ATA</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Rotation.html\">Rotation</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Rotation\r\n * @see <a href=\"Tag/Rotation.html\">Rotation</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n/** \r\n * The constructor creates an instance of <a href=\"Tag/Vec3f.html\">Vec3f</a> object from <a href=\"Tag/index.html\">Cortona3D Tag JavaScript API</a>.\r\n * @class Vec3f\r\n * @see <a href=\"Tag/Vec3f.html\">Vec3f</a> for further information.\r\n * @memberof module:solo.tag\r\n */\r\n\r\n\r\nmodule.exports = Stella;","/*** IMPORTS FROM imports-loader ***/\n\nvar Stella = {};\n\n/*\n *  stella.framework\n *  Cortona3D Tag API\n *\n *  Created by Alexey Nashchekin on 26.06.2016.\n *  Copyright (C) 2016-2024 Parallel Graphics Limited. All rights reserved.\n *\n */\n\n/* \n * @fileoverview Cortona3D Tag JavaScript API.\n *\n * @author {@link http://www.cortona3d.com Cortona3D}\n * @version 2.0 (58)\n */\n\n\nif (typeof (Stella) === 'undefined')\n\tStella = {};\n\n(function (stella) {\n\t\n\tnew Model3D();\n\n\tconst kDotDefaults = {\n\t\t\tareaData: '',\n\t\t\tcolor: [1, 0, 0],\n\t\t\tlocation: new Vec3f(0, 0, 0),\n\t\t\tnormal: new Vec3f(0, 1, 0),\n\t\t\tsectionID: '',\n\t\t\tshapeType: 0,\n\t\t\tstructureClass: '',\n\t\t\ttexture: 0,\n\t\t\ttype: 'dot',\n\t\t\tviewpointOrientation: new Rotation(0, 0, 1, 0),\n\t\t\tviewpointPosition: new Vec3f(0, 0, 0)\n\t\t},\n\t\tm_itemsBeingLoaded = new Map(),\n\t\tkDotTypeNames = ['dot', 'line', 'area'],\n\t\tkPredefinedViews = ['LS', 'RS', 'LTF', 'RTF', 'LTA', 'RTA', 'LBF', 'RBF', 'LBA', 'RBA', 'TOP', 'BTM'];\n\tlet newbornDot = null,\n\t\tlastFlashedDot,\n\t\tisPlotMode = false;\n\n\t/**\n\t * Constructs a new Viewpoint object.\n\t * @name Viewpoint\n\t * @classdesc Represents a position of the camera in the 3D.\n\t * @class\n\t */\n\tfunction Viewpoint() {\n\t\tlet position = new Vec3f(0, 0, 0),\n\t\t\torientation = new Rotation(0, 0, 1, 0),\n\t\t\tcenter = new Vec3f(0, 0, 0);\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The position of the camera.\n\t\t\t * @name Viewpoint#position\n\t\t\t * @type Vec3f\n\t\t\t */\n\t\t\t'position': {\n\t\t\t\tget: function () { return position; },\n\t\t\t\tset: function (value) {\n\t\t\t\t\tposition = Array.isArray(value) ? new Vec3f(value[0], value[1], value[2]) : value;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The orientation of the camera.\n\t\t\t * @name Viewpoint#orientation\n\t\t\t * @type Rotation\n\t\t\t */\n\t\t\t'orientation': {\n\t\t\t\tget: function () { return orientation; },\n\t\t\t\tset: function (value) {\n\t\t\t\t\torientation = Array.isArray(value) ? new Rotation(value[0], value[1], value[2], value[3]) : value;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The center of rotation.\n\t\t\t * @name Viewpoint#center\n\t\t\t * @type Vec3f\n\t\t\t */\n\t\t\t'center': {\n\t\t\t\tget: function () { return center; },\n\t\t\t\tset: function (value) {\n\t\t\t\t\tcenter = Array.isArray(value) ? new Vec3f(value[0], value[1], value[2]) : value;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t});\n\t}\n\tObject.defineProperties(Viewpoint.prototype, {\n\t\t/**\n\t\t * Initializes the object from the string. \n\t\t * @param {string} str - 10 space delimited numbers corresponding to the position, orientation and center of rotation.\n\t\t * @returns {Viewpoint} The {@link Viewpoint} object.\n\t\t * @function Viewpoint#fromString\n\t\t */\n\t\t'fromString': {\n\t\t\tvalue: function (str) {\n\t\t\t\tconst bulk = str.split(' ');\n\t\t\t\tthis.position = bulk.slice(0, 3);\n\t\t\t\tthis.orientation = bulk.slice(3, 7);\n\t\t\t\tthis.center = bulk.slice(7);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Initializes the object with the current values of the position, orientaition and center of rotation being set up in the 3D scene. \n\t\t * @returns {Viewpoint} The {@link Viewpoint} object.\n\t\t * @function Viewpoint#fromCurrentViewpoint\n\t\t */\n\t\t'fromCurrentViewpoint': {\n\t\t\tvalue: function () {\n\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\tdata = stackAlloc(48);\n\t\t\t\tHEAPU32[data >> 2] = 11;\n\t\t\t\tModule._tiramisu_getCameraProperties(data);\n\t\t\t\tthis.position = float3_asVec3f(data + 4);\n\t\t\t\tthis.orientation = float4_asRotation(data + 16);\n\t\t\t\tthis.center = float3_asVec3f(data + 36);\n\t\t\t\tstackRestore(sp);\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns a string representation of the object.\n\t\t * @returns {string}\n\t\t * @function Viewpoint#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: function () { return this.position + ' ' + this.orientation + ' ' + this.center; }\n\t\t}\n\t});\n\n\tfunction float3_asArray(value) {\n\t\tconst p = value >> 2;\n\t\treturn [HEAPF32[p], HEAPF32[p + 1], HEAPF32[p + 2]];\n\t}\n\tfunction float4_asArray(value) {\n\t\tconst p = value >> 2;\n\t\treturn [HEAPF32[p], HEAPF32[p + 1], HEAPF32[p + 2], HEAPF32[p + 3]];\n\t}\n\tfunction float3_asVec3f(value) {\n\t\tconst p = value >> 2;\n\t\treturn new Vec3f(HEAPF32[p], HEAPF32[p + 1], HEAPF32[p + 2]);\n\t}\n\tfunction float4_asRotation(value) {\n\t\tconst p = value >> 2;\n\t\treturn new Rotation(HEAPF32[p], HEAPF32[p + 1], HEAPF32[p + 2], HEAPF32[p + 3]);\n\t}\n\tfunction float3Array_asArray(addr, count) {\n\t\tif (!addr || !count)\n\t\t\treturn null;\n\t\tconst items = [];\n\t\tfor (let i = 0, p = addr >> 2; i < count; ++i, p += 3)\n\t\t\titems.push([HEAPF32[p], HEAPF32[p + 1], HEAPF32[p + 2]]);\n\t\treturn items;\n\t}\n\tfunction floatArray_asArray(addr, count) {\n\t\tif (!addr || !count)\n\t\t\treturn null;\n\t\tconst items = [];\n\t\tfor (let i = 0, p = addr >> 2; i < count; ++i, ++p)\n\t\t\titems.push(HEAPF32[p]);\n\t\treturn items;\n\t}\n\tfunction intArray_asArray(addr, count) {\n\t\tif (!addr || !count)\n\t\t\treturn null;\n\t\tconst items = [];\n\t\tfor (let i = 0, p = addr >> 2; i < count; ++i, ++p)\n\t\t\titems.push(HEAP32[p]);\n\t\treturn items;\n\t}\n\tfunction float3_fromArray(value, array) {\n\t\tconst p = value >> 2;\n\t\tHEAPF32[p] = array[0];\n\t\tHEAPF32[p + 1] = array[1];\n\t\tHEAPF32[p + 2] = array[2];\n\t}\n\tfunction float3_fromObject(value, obj) {\n\t\tconst p = value >> 2;\n\t\tif (Array.isArray(obj)) {\n\t\t\tHEAPF32[p] = obj[0];\n\t\t\tHEAPF32[p + 1] = obj[1];\n\t\t\tHEAPF32[p + 2] = obj[2];\n\t\t} else {\n\t\t\tHEAPF32[p] = obj.x;\n\t\t\tHEAPF32[p + 1] = obj.y;\n\t\t\tHEAPF32[p + 2] = obj.z;\n\t\t}\n\t}\n\tfunction float4_fromArray(value, array) {\n\t\tconst p = value >> 2;\n\t\tHEAPF32[p] = array[0];\n\t\tHEAPF32[p + 1] = array[1];\n\t\tHEAPF32[p + 2] = array[2];\n\t\tHEAPF32[p + 3] = array[3];\n\t}\n\tfunction float3_fromVec3f(value, location) {\n\t\tconst p = value >> 2;\n\t\tHEAPF32[p] = location.x;\n\t\tHEAPF32[p + 1] = location.y;\n\t\tHEAPF32[p + 2] = location.z;\n\t}\n\tfunction float4_fromRotation(value, rotation) {\n\t\tconst p = value >> 2;\n\t\tHEAPF32[p] = rotation.x;\n\t\tHEAPF32[p + 1] = rotation.y;\n\t\tHEAPF32[p + 2] = rotation.z;\n\t\tHEAPF32[p + 3] = rotation.angle;\n\t}\n\tfunction defaultToString() {\n\t\tlet s = this.constructor.name + ' {',\n\t\t\tf = false;\n\t\tfor (let key in this) {\n\t\t\tconst value = this[key];\n\t\t\tconst type = typeof (value);\n\t\t\tif (type === 'function')\n\t\t\t\tcontinue;\n\n\t\t\ts += (f ? ', ' : ' ') + key + '=';\n\t\t\tif (type === 'string')\n\t\t\t\ts += '\"' + value + '\"';\n\t\t\telse if (type === 'object' && (value.constructor === Array || value.constructor === Viewpoint))\n\t\t\t\ts += '[' + value + ']';\n\t\t\telse\n\t\t\t\ts += value;\n\t\t\tf = true;\n\t\t}\n\t\ts += ' }';\n\t\treturn s;\n\t}\n\tfunction getMidpointWithZ(midpoints, z) {\n\t\tif (z >= midpoints[0].z)\n\t\t\treturn midpoints[0].y;\n\t\tif (z <= midpoints[midpoints.length - 1].z)\n\t\t\treturn midpoints[midpoints.length - 1].y;\n\t\tfor (let i = 1; i < midpoints.length; i++) {\n\t\t\tif (z > midpoints[i].z)\n\t\t\t\treturn midpoints[i].y - (midpoints[i].z - z) / (midpoints[i].z - midpoints[i - 1].z) * (midpoints[i].y - midpoints[i - 1].y);\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a new RepairDot object.\n\t * @classdesc Represents a repair dot.\n\t * @class\n\t * @name RepairDot\n\t */\n\tfunction RepairDot() {\n\t\tlet id = '';\n\t\tObject.defineProperties(this, {\n\t\t\t'_peer': { value: 0, writable: true },\n\t\t\t'_state': { value: Object.create(kDotDefaults), writable: true, configurable: true },\n\n\t\t\t/**\n\t\t\t * The unique ID of the repair dot.\n\t\t\t * @type string\n\t\t\t * @name RepairDot#id\n\t\t\t */\n\t\t\t'id': {\n\t\t\t\tget: function () { return id; },\n\t\t\t\tset: function (value) {\n\t\t\t\t\tif (!this._peer || Model3D.instance._dotWillChangeID(this, value))\n\t\t\t\t\t\tid = value;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t}\n\t\t});\n\t}\n\n\tObject.defineProperties(RepairDot, {\n\t\t/**\n\t\t * Types of the dot geometry in the 3D representation.\n\t\t * @prop {number} RepairDot.SHAPE_NONE=0 - No Shape.\n\t\t * @prop {number} RepairDot.SHAPE_BOX=1 - Box (default).\n\t\t * @prop {number} RepairDot.SHAPE_SPHERE=2 - Sphere.\n\t\t * @prop {number} RepairDot.SHAPE_PRISM=3 - Prism.\n\t\t * @prop {number} RepairDot.SHAPE_CROSS=4 - Cross.\n\t\t * @typedef {number} RepairDotShapeType\n\t\t * @see {@link RepairDot#shapeType}\n\t\t */\n\t\t'SHAPE_NONE': { value: 0, enumerable: true },\n\t\t'SHAPE_BOX': { value: 1, enumerable: true },\n\t\t'SHAPE_SPHERE': { value: 2, enumerable: true },\n\t\t'SHAPE_PRISM': { value: 3, enumerable: true },\n\t\t'SHAPE_CROSS': { value: 4, enumerable: true },\n\t\t/**\n\t\t * Types of the repair area texture.\n\t\t * @prop {number} RepairDot.TEXTURE_NONE=0 - No texture.\n\t\t * @prop {number} RepairDot.TEXTURE_HATCH=1 - Hatched texture.\n\t\t * @prop {number} RepairDot.TEXTURE_CROSSHATCH=2 - Crosshatched texture.\n\t\t * @prop {number} RepairDot.TEXTURE_DOTS=3 - Dotted texture.\n\t\t * @prop {number} RepairDot.TEXTURE_CIRCLES=4 - Texture with pattern of circles.\n\t\t * @typedef {number} RepairDotTexture\n\t\t * @see {@link RepairDot#texture}\n\t\t */\n\t\t'TEXTURE_NONE': { value: 0, enumerable: true },\n\t\t'TEXTURE_HATCH': { value: 1, enumerable: true },\n\t\t'TEXTURE_CROSSHATCH': { value: 2, enumerable: true },\n\t\t'TEXTURE_DOTS': { value: 3, enumerable: true },\n\t\t'TEXTURE_CIRCLES': { value: 4, enumerable: true }\n\t});\n\n\tObject.defineProperties(RepairDot.prototype, {\n\t\t/**\n\t\t * The additional information that is used for building repair lines or repair areas.\n\t\t * @type string\n\t\t * @name RepairDot#areaData\n\t\t */\n\t\t'areaData': {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\treturn this._state.areaData;\n\t\t\t\tconst sz = Module._stella_dot_copyAreaData(this._peer),\n\t\t\t\t\tdata = UTF8ToString(sz);\n\t\t\t\tModule._free(sz);\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.areaData = value;\n\t\t\t\telse\n\t\t\t\t\tModule.ccall('stella_dot_setAreaData', 'null', ['number', 'string'], [this._peer, value]);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The color of the shape of the repair dot as an array of three floats [r, g, b]. \n\t\t * Every RGB component in the array is a number in range of 0 to 1. \n\t\t * @type number[]\n\t\t * @name RepairDot#color\n\t\t * @default [1, 0, 0]\n\t\t */\n\t\t'color': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3_asArray(Module._stella_dot_getColor(this._peer)) : this._state.color;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.color = value;\n\t\t\t\telse\n\t\t\t\t\tModule._stella_dot_setColor(this._peer, value[0], value[1], value[2]);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The VRML coordinates of the repair dot in the 3D scene.\n\t\t * @type Vec3f\n\t\t * @name RepairDot#location\n\t\t */\n\t\t'location': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3_asVec3f(Module._stella_dot_getLocation(this._peer)) : this._state.location;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (!this._peer)\n\t\t\t\t\t\tthis._state.location = new Vec3f(value[0], value[1], value[2]);\n\t\t\t\t\telse\n\t\t\t\t\t\tModule._stella_dot_setLocation(this._peer, value[0], value[1], value[2]);\n\t\t\t\t} else {\n\t\t\t\t\tif (!this._peer)\n\t\t\t\t\t\tthis._state.location = new Vec3f(value.x, value.y, value.z);\n\t\t\t\t\telse\n\t\t\t\t\t\tModule._stella_dot_setLocation(this._peer, value.x, value.y, value.z);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The normal vector as an array of three floats [x, y, z] that specifies the orientation of the shape of the repair dot in the 3D space. \n\t\t * @type Vec3f\n\t\t * @name RepairDot#normal\n\t\t * @default Vec3f(0, 1, 0)\n\t\t */\n\t\t'normal': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3_asVec3f(Module._stella_dot_getNormal(this._peer)) : this._state.normal;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (!this._peer)\n\t\t\t\t\t\tthis._state.normal = new Vec3f(value[0], value[1], value[2]);\n\t\t\t\t\telse\n\t\t\t\t\t\tModule._stella_dot_setNormal(this._peer, value[0], value[1], value[2]);\n\t\t\t\t} else {\n\t\t\t\t\tif (!this._peer)\n\t\t\t\t\t\tthis._state.normal = new Vec3f(value.x, value.y, value.z);\n\t\t\t\t\telse\n\t\t\t\t\t\tModule._stella_dot_setNormal(this._peer, value.x, value.y, value.z);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The type of the dot geometry in the 3D scene. One of the standard types\n\t\t * or the identifier of the custom shape type registered with {@link Model3D#registerRepairDotShape}.\n\t\t * @type (RepairDotShapeType|number)\n\t\t * @name RepairDot#shapeType\n\t\t * @default RepairDot.SHAPE_BOX\n\t\t */\n\t\t'shapeType': {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? Module._stella_dot_getShapeType(this._peer) : this._state.shapeType;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.shapeType = value;\n\t\t\t\telse\n\t\t\t\t\tModule._stella_dot_setShapeType(this._peer, value | 0);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The type of the repair area texture. One of the standard texture types\n\t\t * or the identifier of the custom texture registered with {@link Model3D@registerRepairDotTexture}.\n\t\t * @type (RepairDotTexture|number)\n\t\t * @name RepairDot#texture\n\t\t * @default RepairDot.TEXTURE_NONE\n\t\t */\n\t\t'texture': {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? Module._stella_dot_getTextureType(this._peer) : this._state.texture;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.texture = value;\n\t\t\t\telse\n\t\t\t\t\tModule._stella_dot_setTextureType(this._peer, value | 0);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The type of the repair dot. At the moment, the supported types are \"dot\", \"line\" and \"area\".\n\t\t * @type string\n\t\t * @name RepairDot#type\n\t\t * @default \"dot\"\n\t\t */\n\t\t'type': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? kDotTypeNames[Module._stella_dot_getType(this._peer)] : this._state.type;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.type = value;\n\t\t\t\telse\n\t\t\t\t\tModule._stella_dot_setType(this._peer, kDotTypeNames.indexOf(value));\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The identifier of the section where the damage occurs.\n\t\t * @type string\n\t\t * @name RepairDot#sectionID\n\t\t */\n\t\t'sectionID': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? UTF8ToString(Module._stella_dot_getSectionID(this._peer)) : this._state.sectionID;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.sectionID = value;\n\t\t\t\telse\n\t\t\t\t\tModule.ccall('stella_dot_setSectionID', 'null', ['number', 'string'], [this._peer, value]);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The name of the airplane structure class where the damage occurs.\n\t\t * @type string\n\t\t * @name RepairDot#structureClass\n\t\t */\n\t\t'structureClass': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? UTF8ToString(Module._stella_dot_getStructureClass(this._peer)) : this._state.structureClass;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer)\n\t\t\t\t\tthis._state.structureClass = value;\n\t\t\t\telse\n\t\t\t\t\tModule.ccall('stella_dot_setStructureClass', 'null', ['number', 'string'], [this._peer, value]);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The viewer position.\n\t\t * @type Vec3f\n\t\t * @name RepairDot#viewpointPosition\n\t\t * @default [0, 0, 0]\n\t\t */\n\t\t'viewpointPosition': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3_asVec3f(Module._stella_dot_getViewpoint(this._peer)) : this._state.viewpointPosition;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer) {\n\t\t\t\t\tthis._state.viewpointPosition = value;\n\t\t\t\t} else {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\tvec = stackAlloc(12);\n\t\t\t\t\tfloat3_fromObject(vec, value);\n\t\t\t\t\tModule._stella_dot_setViewpoint(this._peer, vec, 0);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The viewer orientation.\n\t\t * @type Rotation\n\t\t * @name RepairDot#viewpointOrientation\n\t\t * @default [0, 0, 1, 0]\n\t\t */\n\t\t'viewpointOrientation': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float4_asRotation(12 + Module._stella_dot_getViewpoint(this._peer)) : this._state.viewpointOrientation;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (!this._peer) {\n\t\t\t\t\tthis._state.viewpointOrientation = value;\n\t\t\t\t} else {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\trot = stackAlloc(16);\n\t\t\t\t\tfloat4_fromRotation(rot, value);\n\t\t\t\t\tModule._stella_dot_setViewpoint(this._peer, 0, rot);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the visibility of the repair dot. \n\t\t * @type boolean\n\t\t * @name RepairDot#hidden\n\t\t * @default false\n\t\t */\n\t\t'hidden': {\n\t\t\tget: function () {return !!(this._peer && Module._stella_item_isHidden(this._peer));},\n\t\t\tset: function (hidden) {if (this._peer) Module._stella_item_setHidden(this._peer, hidden);},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the highlight state of the repair dot. \n\t\t * @type boolean\n\t\t * @name RepairDot#highlighted\n\t\t * @default false\n\t\t */\n\t\t'highlighted': {\n\t\t\tget: function () { return !!(this._peer && Module._stella_item_isHighlighted(this._peer)); },\n\t\t\tset: function (highlight) { if (this._peer) Module._stella_item_setHighlighted(this._peer, highlight); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Starts flashing the repair dot.\n\t\t * @param {number} [duration] - The period of time when the flashing of the repair dot takes place (in seconds). The default value is {@link Model3D#DOT_FLASH_INTERVAL}.\n\t\t * @param {number} [frequency] - The frequency of the flashing (in hertz). The default value is {@link Model3D#DOT_FLASH_FREQUENCY}.\n\t\t * @function RepairDot#flash\n\t\t */\n\t\t'flash': {\n\t\t\tvalue: function (duration, frequency) {\n\t\t\t\tif (this._peer)\n\t\t\t\t\tModule._stella_dot_flash(this._peer, duration ? (duration | 0) : Model3D.instance.DOT_FLASH_INTERVAL, frequency ? (frequency | 0) : Model3D.instance.DOT_FLASH_FREQUENCY);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Cancels flashing the repair dot.\n\t\t * @function RepairDot#stopFlash\n\t\t */\n\t\t'stopFlash': {\n\t\t\tvalue: function () {\n\t\t\t\tif (this._peer)\n\t\t\t\t\tModule._stella_dot_cancelFlash(this._peer);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Creates an exact copy of the RepairDot object with the same attribute values.\n\t\t * @returns {RepairDot} Returns the newly created copy of the repair dot object.\n\t\t * @function RepairDot#clone\n\t\t */\n\t\t'clone': {\n\t\t\tvalue: function () {\n\t\t\t\tconst dolly = new RepairDot();\n\t\t\t\tdolly.id = this.id;\n\t\t\t\tdolly._state = dotGetState(this);\n\t\t\t\treturn dolly;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Updates the viewpointPosition and viewpointIrientation properties with the current ones of the camera in 3D scene.\n\t\t * @function RepairDot#assignCurrentView\n\t\t */\n\t\t'assignCurrentView': {\n\t\t\tvalue: function () {\n\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\tdata = stackAlloc(48);\n\t\t\t\tHEAPU32[data >> 2] = 3;\n\t\t\t\tModule._tiramisu_getCameraProperties(data);\n\t\t\t\tif (!this._peer) {\n\t\t\t\t\tthis._state.viewpointPosition = float3_asVec3f(data + 4);\n\t\t\t\t\tthis._state.viewpointOrientation = float4_asRotation(data + 16);\n\t\t\t\t} else {\n\t\t\t\t\tModule._stella_dot_setViewpoint(this._peer, data + 4, data + 16);\n\t\t\t\t}\n\t\t\t\tstackRestore(sp);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns a string representation of the repair dot.\n\t\t * @returns {string}\n\t\t * @function RepairDot#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: defaultToString\n\t\t},\n\t\t/**\n\t\t * Vertices of the line or area representation as an array of float triplets representing X, Y, Z positions for a vertex within the geometry.\n\t\t * @type number[]\n\t\t * @readonly\n\t\t * @name RepairDot#vertices\n\t\t */\n\t\t'vertices': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3Array_asArray(\n\t\t\t\t\tModule._stella_dot_getAreaDataComponent(this._peer, 0),\n\t\t\t\t\tModule._stella_dot_getAreaDataComponentSize(this._peer, 0)) : this._state.vertices;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Surface vertices of the area representation as an array of float triplets representing X, Y, Z positions for a surface vertex within the geometry.\n\t\t * @type number[]\n\t\t * @readonly\n\t\t * @name RepairDot#surfaceVertices\n\t\t */\n\t\t'surfaceVertices': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3Array_asArray(\n\t\t\t\t\tModule._stella_dot_getAreaDataComponent(this._peer, 1),\n\t\t\t\t\tModule._stella_dot_getAreaDataComponentSize(this._peer, 1)) : this._state.surfaceVertices;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Surface indices of the area representation as an array of integer numbers.\n\t\t * @type number[]\n\t\t * @readonly\n\t\t * @name RepairDot#surfaceIndices\n\t\t */\n\t\t'surfaceIndices': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? intArray_asArray(\n\t\t\t\t\tModule._stella_dot_getAreaDataComponent(this._peer, 2),\n\t\t\t\t\tModule._stella_dot_getAreaDataComponentSize(this._peer, 2)) : this._state.surfaceIndices;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Texture properties of the area representation as an array of float numbers.\n\t\t * @type number[]\n\t\t * @readonly\n\t\t * @name RepairDot#textureProperties\n\t\t */\n\t\t'textureProperties': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? floatArray_asArray(\n\t\t\t\t\tModule._stella_dot_getAreaDataComponent(this._peer, 3),\n\t\t\t\t\tModule._stella_dot_getAreaDataComponentSize(this._peer, 3)) : this._state.textureProperties;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * An opaque object handle which can be used in miscellaneous Solo.app functions.\n\t\t * @type number\n\t\t * @readonly\n\t\t * @name RepairDot#handle\n\t\t */\n\t\t'handle': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? Module._stella_item_getNode(this._peer) : 0;\n\t\t\t}\n\t\t},\n\t});\n\n\tfunction dotDidAttachToModel(dot, model) {\n\t\tModule._stella_item_release(dot._peer);\n\t\tdot._peer = Module._stella_dot_create();\n\t\tModule.ccall('stella_item_setID', 'null', ['number', 'string'], [dot._peer, dot.id]);\n\t\tModule._stella_model_addRepairDot(dot._peer);\n\t\tif (dot._state) {\n\t\t\tconst state = dot._state;\n\t\t\tfor (let p in state)\n\t\t\t\tif (!isReadOnlyProperty(p))\n\t\t\t\t\tdot[p] = state[p];\n\t\t\tdelete dot._state;\n\t\t}\n\t}\n\n\tfunction isReadOnlyProperty(name) {\n\t\treturn name == 'vertices' || name == 'surfaceVertices' || name == 'surfaceIndices' || name == 'textureProperties';\n\t}\n\n\tfunction dotGetState(dot) {\n\t\treturn {\n\t\t\ttype: dot.type,\n\t\t\tcolor: dot.color,\n\t\t\tlocation: dot.location,\n\t\t\tnormal: dot.normal,\n\t\t\tviewpointPosition: dot.viewpointPosition,\n\t\t\tviewpointOrientation: dot.viewpointOrientation,\n\t\t\tshapeType: dot.shapeType,\n\t\t\ttexture: dot.texture,\n\t\t\tsectionID: dot.sectionID,\n\t\t\tstructureClass: dot.structureClass,\n\t\t\tareaData: dot.areaData,\n\t\t\tvertices: dot.vertices,\n\t\t\tsurfaceVertices: dot.surfaceVertices,\n\t\t\tsurfaceIndices: dot.surfaceIndices,\n\t\t\ttextureProperties: dot.textureProperties,\n\t\t};\n\t}\n\n\tfunction dotDidDetachFromModel(dot) {\n\t\tif (!dot._peer)\n\t\t\treturn;\n\n\t\tdot._state = dotGetState(dot);\n\t\tModule._stella_model_removeRepairDot(dot._peer);\n\t\tModule._stella_item_release(dot._peer);\n\t\tdot._peer = 0;\n\t}\n\n\t/**\n\t * Constructs a new Section fragment.\n\t * @classdesc Represents a part of the airplane section.\n\t * @param {string|function} url - A string or a function representing the URL of the VRML file.\n\t * @class\n\t * @name SectionFragment\n\t */\n\tfunction SectionFragment(url) {\n\t\tconst structures = Object.create(null),\n\t\t\tstructuresCollection = {},\n\t\t\tstate = { \n\t\t\t\tdisabled: false,\n\t\t\t\tloaded: false,\n\t\t\t\tstructures: structures\n\t\t\t};\n\t\tlet peer = 0;\n\t\tdefineReadOnlyCollection(structuresCollection, structures);\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The URL of the VRML file.\n\t\t\t * @type string\n\t\t\t * @readonly\n\t\t\t * @name SectionFragment#url\n\t\t\t */\n\t\t\t'url': { value: typeof(url) === 'function' ? '' : url, enumerable: true },\n\t\t\t'_peer': { get: function () { return peer; } },\n\t\t\t'_state': { value: state },\n\t\t\t'_acquirePeer': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tconst section = this.section;\n\t\t\t\t\tModule._stella_fragment_release(peer);\n\t\t\t\t\tpeer = (section && section._peer) ?\n\t\t\t\t\t\tModule._stella_section_getFragment(section._peer, section.fragments.indexOf(this)) :\n\t\t\t\t\t\tModule.ccall('stella_fragment_create', 'number', ['string'], [typeof(url) === 'function' ? url() : url]);\n\t\t\t\t\treturn peer;\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_releasePeer': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tModule._stella_fragment_release(peer);\n\t\t\t\t\tpeer = 0;\t\t\n\t\t\t\t}\n\t\t\t},\n\t\t\t\t/**\n\t\t\t * Specifies whether the fragment is loaded.\n\t\t\t * @type boolean\n\t\t\t * @readonly\n\t\t\t * @name SectionFragment#isLoaded\n\t\t\t */\n\t\t\t'isLoaded': {\n\t\t\t\tget: function () { return state.loaded; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The collection of the structure elements.\n\t\t\t * @type Structures\n\t\t\t * @readonly\n\t\t\t * @name SectionFragment#structures\n\t\t\t */\n\t\t\t'structures': {\n\t\t\t\tvalue: structuresCollection,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The airplane section which contains this fragment.\n\t\t\t * @type ?Section\n\t\t\t * @readonly\n\t\t\t * @name SectionFragment#section\n\t\t\t */\n\t\t});\n\t}\n\n\tObject.defineProperties(SectionFragment.prototype, {\n\t\t/**\n\t\t * Indicates whether the fragment is disabled.\n\t\t * @type boolean\n\t\t * @readonly\n\t\t * @name SectionFragment#isDisabled\n\t\t */\n\t\t'isDisabled': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? !!Module._stella_fragment_isDisabled(this._peer) : this._state.disabled;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Enables previously disabled fragment.\n\t\t * Framework will load the VRML representation of the section fragment if needed.\n\t\t * @returns {Promise}\n\t\t * @function SectionFragment#enable\n\t\t * @see SectionFragment#isDisabled\n\t\t */\n\t\t'enable': {\n\t\t\tvalue: function () {\n\t\t\t\tif (m_itemsBeingLoaded.has(this))\n\t\t\t\t\treturn Promise.reject(new Error('Fragment load is already in progress'));\n\t\t\t\tif (!this._state.disabled)\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._state.disabled = false;\n\t\t\t\t\tlet peer = this._peer;\n\t\t\t\t\tif (!peer)\n\t\t\t\t\t\tpeer = this._acquirePeer();\n\t\t\t\t\tif (peer) {\n\t\t\t\t\t\tm_itemsBeingLoaded.set(this, {\n\t\t\t\t\t\t\tresolve: resolve,\n\t\t\t\t\t\t\treject: reject\n\t\t\t\t\t\t});\n\t\t\t\t\t\tModule._stella_fragment_setDisabled(peer, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error('Fragment cannot be enabled'));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Disables the fragment.\n\t\t * @function SectionFragment#disable\n\t\t * @see SectionFragment#isDisabled\n\t\t */\n\t\t'disable': {\n\t\t\tvalue: function () { \n\t\t\t\tthis._state.disabled = true;\n\t\t\t\tModule._stella_fragment_setDisabled(this._peer, true);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\n\t\t/**\n\t\t * Returns a string representation of the object.\n\t\t * @returns {string}\n\t\t * @function SectionFragment#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: function () {\n\t\t\t\treturn `SectionFragment { url=\"${this.url}\", isLoaded=${this.isLoaded} }`;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * An opaque object handle which can be used in miscellaneous Solo.app functions.\n\t\t * @type number\n\t\t * @readonly\n\t\t * @name SectionFragment#handle\n\t\t */\n\t\t'handle': {\n\t\t\tget: function () {\n\t\t\t\treturn Module._stella_fragment_getNode(this._peer);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * Constructs a new Section object.\n\t * @classdesc Represents an airplane section.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @param {string} name - The name of the airplane section.\n\t * @param {SectionFragments[]} fragments - An array containing the section fragments.\n\t * @class\n\t * @name Section\n\t */\n\tfunction Section(sectionID, name, fragments) {\n\t\tlet id = sectionID;\n\n\t\t/**\n\t\t * The name of the airplane section.\n\t\t * @type string\n\t\t * @name Section#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * The midpoints for the airplane section.\n\t\t * @type ?Vec3f[]\n\t\t * @name Section#midpoints\n\t\t */\n\t\tthis.midpoints = null;\n\n\t\t/**\n\t\t * The fasteners for the airplane section.\n\t\t * @type ?Object[]\n\t\t * @name Section#fasteners\n\t\t */\n\t\tthis.fasteners = null;\n\n\t\tfragments.forEach(fragment => Object.defineProperty(fragment, 'section', { value: this, enumerable: true }));\n\n\t\tconst structures = {};\n\t\tObject.defineProperties(structures, {\n\t\t\t'get': {\n\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\tfor (const fragment of fragments) {\n\t\t\t\t\t\tconst item = fragment.structures.get(itemID);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'has': {\n\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\tfor (const fragment of fragments)\n\t\t\t\t\t\tif (fragment.structures.has(itemID))\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'forEach': {\n\t\t\t\tvalue: function (callback) {\n\t\t\t\t\tfragments.forEach(fragment => fragment.structures.forEach(callback));\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'find': {\n\t\t\t\tvalue: function (callback) {\n\t\t\t\t\tfor (const fragment of fragments) {\n\t\t\t\t\t\tconst structure = fragment.structures.find(callback);\n\t\t\t\t\t\tif (structure)\n\t\t\t\t\t\t\treturn structure;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'toArray': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tlet items = [];\n\t\t\t\t\tfor (const fragment of fragments)\n\t\t\t\t\t\titems = items.concat(fragment.structures.toArray());\n\t\t\t\t\treturn items;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t}\n\t\t});\n\n\t\tconst state = {\n\t\t\ttranslation: new Vec3f(0, 0, 0),\n\t\t\trotation: new Rotation(0, 0, 1, 0),\n\t\t\tzones: null,\n\t\t\thidden: false,\n\t\t\tloaded: false\n\t\t};\n\t\tObject.defineProperties(this, {\n\t\t\t'_peer': { value: 0, writable: true },\n\t\t\t'_state': { value: state },\n\t\t\t/**\n\t\t\t * The unique identifier of the airplane section.\n\t\t\t * @type string\n\t\t\t * @name Section#id\n\t\t\t */\n\t\t\t'id': {\n\t\t\t\tget: function () { return id; },\n\t\t\t\tset: function (value) { if (!this._peer) id = value; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * An array containing the section fragments.\n\t\t\t * @type SectionFragment[]\n\t\t\t * @readonly\n\t\t\t * @name Section#fragments\n\t\t\t */\n\t\t\t'fragments': {\n\t\t\t\tvalue: [...fragments],\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The collection of the structure elements.\n\t\t\t * @type Structures\n\t\t\t * @readonly\n\t\t\t * @name Section#structures\n\t\t\t */\n\t\t\t'structures': {\n\t\t\t\tvalue: structures,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Section zones.\n\t\t\t * The zones property cannot be set if the section is already loaded.\n\t\t\t * @type ?SectionZones\n\t\t\t * @readonly\n\t\t\t * @name Section#zones\n\t\t\t */\n\t\t\t'zones': {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn state.zones;\n\t\t\t\t},\n\t\t\t\tset: function (zones) {\n\t\t\t\t\tif (!state.loaded) {\n\t\t\t\t\t\tstate.zones = zones;\n\t\t\t\t\t\tzones._attachToSection(this);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Specifies whether the section is loaded.\n\t\t\t * @type boolean\n\t\t\t * @readonly\n\t\t\t * @name Section#isLoaded\n\t\t\t */\n\t\t\t'isLoaded': {\n\t\t\t\tget: function () { return state.loaded; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t});\n\t}\n\n\tfunction getClosestSectionStructures(sectionImpl, location, maxDistance, method, structureClasses) {\n\t\tif (!sectionImpl)\n\t\t\treturn null;\n\t\tconst sp = stackSave(),\n\t\t\tcount = structureClasses ? structureClasses.length : 0,\n\t\t\tcarray = count ? stackAlloc((count + 1) * 4) : 0;\n\t\tfor (let i = 0; i < count; ++i)\n\t\t\tHEAPU32[(carray >> 2) + i] = stackAlloc(intArrayFromString(structureClasses[i]));\n\t\tHEAPU32[(carray >> 2) + count] = 0;\n\t\tconst res = Module[method](sectionImpl, location.x, location.y, location.z, maxDistance, carray);\n\t\tstackRestore(sp);\n\t\tif (!res)\n\t\t\treturn null;\n\t\tlet p = res >> 2;\n\t\tconst items = [],\n\t\t\titemCount = HEAPU32[p];\n\t\t++p;\n\t\tfor (let i = 0; i < itemCount; ++i, p += 5) {\n\t\t\titems.push({\n\t\t\t\t'name': UTF8ToString(HEAPU32[p]),\n\t\t\t\t'distance': HEAPF32[p + 1],\n\t\t\t\t'translation': new Vec3f(HEAPF32[p + 2], HEAPF32[p + 3], HEAPF32[p + 4])\n\t\t\t});\n\t\t}\n\t\tModule._free(res);\n\t\treturn items;\n\t}\n\n\tObject.defineProperties(Section.prototype, {\n\t\t/**\n\t\t * Specifies the visibility of the section.\n\t\t * @type boolean\n\t\t * @name Section#hidden\n\t\t */\n\t\t'hidden': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? !!Module._stella_section_isHidden(this._peer) : this._state.hidden;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tthis._state.hidden == !!value;\n\t\t\t\tif (this._peer)\n\t\t\t\t\tModule._stella_section_setHidden(this._peer, value);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The offset of the section in the VRML coordinate system.\n\t\t * @type Vec3f\n\t\t * @name Section#translation\n\t\t */\n\t\t'translation': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float3_asVec3f(Module._stella_section_getTranslation(this._peer)) : this._state.translation;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthis._state.translation = new Vec3f(value[0], value[1], value[2]);\n\t\t\t\t\tif (this._peer)\n\t\t\t\t\t\tModule._stella_section_setTranslation(this._peer, value[0], value[1], value[2]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._state.translation = new Vec3f(value.x, value.y, value.z);\n\t\t\t\t\tif (this._peer)\n\t\t\t\t\t\tModule._stella_section_setTranslation(this._peer, value.x, value.y, value.z);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * The rotation of the section.\n\t\t * @type Rotation\n\t\t * @name Section#rotation\n\t\t */\n\t\t'rotation': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? float4_asRotation(Module._stella_section_getRotation(this._peer)) : this._state.rotation;\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthis._state.rotation = new Rotation(value[0], value[1], value[2], value[3]);\n\t\t\t\t\tif (this._peer)\n\t\t\t\t\t\tModule._stella_section_setRotation(this._peer, value[0], value[1], value[2], value[3]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._state.rotation = new Rotation(value.x, value.y, value.z, value.angle);\n\t\t\t\t\tif (this._peer)\n\t\t\t\t\t\tModule._stella_section_setRotation(this._peer, value.x, value.y, value.z, value.angle);\n\t\t\t\t}\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the visibility of the repair dots associated with the section.\n\t\t * @type boolean\n\t\t * @name Section#repairDotsHidden\n\t\t */\n\t\t'repairDotsHidden': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer && !!Module._stella_section_areRepairDotsHidden(this._peer);\n\t\t\t},\n\t\t\tset: function (value) {\n\t\t\t\tif (this._peer)\n\t\t\t\t\tModule._stella_section_setRepairDotsHidden(this._peer, value);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Controls the translucency of the airplane structure elements that belong to the section.\n\t\t * @param {number} transparency - A floating point number in range of 0 to 1 which specifies the transparency of the structure elements.\n\t\t * @param {boolean} [animated=true] - An optional boolean value which specifies whether the transition is to be animated.\n\t\t * @function Section#setTransparency\n\t\t * @see Model3D#DEFAULT_TRANSPARENCY_LEVEL\n\t\t */\n\t\t'setTransparency': {\n\t\t\tvalue: function (transparency, animated) {\n\t\t\t\tif (this._peer)\n\t\t\t\t\treturn Module._stella_section_setTransparency(this._peer, transparency, typeof animated === 'undefined' || !!animated);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Restores the translucency of the airplane structure elements that belong to the section\n\t\t * according to the current state of the corresponding StructureClass of each structure element.\n\t\t * @param {boolean} [animated=true] - An optional boolean value which specifies whether the transition is to be animated.\n\t\t * @function Section#restoreTransparency\n\t\t * @see StructureClass#transparency\n\t\t */\n\t\t'restoreTransparency': {\n\t\t\tvalue: function (animated) {\n\t\t\t\tif (this._peer)\n\t\t\t\t\treturn Module._stella_section_setTransparency(this._peer, -1, typeof animated === 'undefined' || !!animated);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Finds all the structure elements of the certain type at a distance not more than radius from the center of a given object location. \n\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t * @param {number} radius - The maximum distance to search for a structure element.\n\t\t * @param {?string[]} structureClasses - The array of strings with name of structure classes.\n\t\t * @returns {?Object[]}  An array of the objects &#123; <i>name</i>: String, <i>distance</i>: number, <i>translation</i>: {@link Vec3f} &#125;. <br>Where, the <i>translation</i> property is a vector from a point given in location to the \"nearest\" point of a structure element with a name that is contained in the <i>name</i> property.\n\t\t * @function Section#getStructuresInSphere\n\t\t */\n\t\t'getStructuresInSphere': {\n\t\t\tvalue: function (location, radius, structureClasses) {\n\t\t\t\treturn getClosestSectionStructures(this._peer, location, radius, '_stella_section_getStructuresInSphere', structureClasses ? structureClasses : null);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Finds all the structure elements of the certain type at a distance not more than maxDistance from the center of a given object location across the fuselage. \n\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t * @param {number} maxDistance - The maximum distance to search for a structure element.\n\t\t * @param {?string[]} structureClasses - The array of strings with name of structure classes.\n\t\t * @returns {?Object[]} An array of the objects &#123; <i>name</i>: String, <i>distance</i>: number, <i>translation</i>: {@link Vec3f} &#125;. <br>Where, the <i>translation</i> property is a vector from a point given in location to the \"nearest\" point of a structure element with a name that is contained in the <i>name</i> property.\n\t\t * @function Section#getStructuresAcrossFuselage\n\t\t */\n\t\t'getStructuresAcrossFuselage': {\n\t\t\tvalue: function (location, maxDistance, structureClasses) {\n\t\t\t\treturn getClosestSectionStructures(this._peer, location, maxDistance, '_stella_section_getStructuresAcrossFuselage', structureClasses ? structureClasses : null);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Finds the nearest to the given location fastener.\n\t\t * @param {Vec3f} location - The {@link SFVec3f} object.\n\t\t * @returns {?Fastener} A fastener object, or <i>null</i> if no fastener within {@link Model3D#fastenerSearchRadius} is found.\n\t\t * <p>The <i>metadata</i> property of the returned object has multiple JavaScript properties;\n\t\t * the name and value of each property correspond to the respective properties of the fastener.\n\t\t * Use the JavaScript <b>for (..in)</b> statement to traverse through the properties.\n\t\t * @function Section#getFastenerAtLocation\n\t\t * @see Section#getFastenersForRepairDot\n\t\t */\n\t\t'getFastenerAtLocation': {\n\t\t\tvalue: function (location) {\n\t\t\t\tconst fasteners = this.fasteners;\n\t\t\t\tif (!fasteners || fasteners.length == 0)\n\t\t\t\t\treturn null;\n\n\t\t\t\tlet bestFastener = null;\n\t\t\t\tconst offset = this.translation,\n\t\t\t\t\tx = location.x - offset.x,\n\t\t\t\t\ty = location.y - offset.y,\n\t\t\t\t\tz = location.z - offset.z,\n\t\t\t\t\ts = x * .36 + y * .48 + z * .8;\n\t\t\t\tlet left = 0,\n\t\t\t\t\tright = fasteners.length - 1;\n\t\t\t\twhile (right > left + 1) {\n\t\t\t\t\tconst middle = Math.floor((left + right) / 2);\n\t\t\t\t\tif (fasteners[middle]._projection < s)\n\t\t\t\t\t\tleft = middle;\n\t\t\t\t\telse\n\t\t\t\t\t\tright = middle;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0, minDistance = Model3D.instance.fastenerSearchRadius; ; ++i) {\n\t\t\t\t\tlet failureCount = 0;\n\t\t\t\t\tfor (let j = 0; j < 2; j++) {\n\t\t\t\t\t\tconst k = (j == 0) ? (left - i) : (right + i),\n\t\t\t\t\t\t\tf = fasteners[k];\n\t\t\t\t\t\tif (f && Math.abs(f._projection - s) <= minDistance) {\n\t\t\t\t\t\t\tconst p = f.location,\n\t\t\t\t\t\t\t\tdx = p.x - x,\n\t\t\t\t\t\t\t\tdy = p.y - y,\n\t\t\t\t\t\t\t\tdz = p.z - z,\n\t\t\t\t\t\t\t\td = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\t\t\t\t\t\t\tif (minDistance > d) {\n\t\t\t\t\t\t\t\tminDistance = d;\n\t\t\t\t\t\t\t\tbestFastener = f;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t++failureCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (failureCount == 2)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn bestFastener;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns the fasteners corresponding to the repair dot.\n\t\t * <p>The behavior of this method varies on the type of repair dot:<ul>\n\t\t * <li>For a simple dot, finds the nearest to the dot fastener. When looking up the nearest fastener,\n\t\t * only fasteners within the {@link Model3D#fastenerSearchRadius} radius are taken into account.\n\t\t * <li>For a repair line, returns all fasteners along the polyline. When looking up the fasteners,\n\t\t * only fasteners within {@link Model3D#fastenerSearchRadius} are taken into account.\n\t\t * <li>For a repair area, Returns all fasteners inside the area. If no fasteners are inside the area,\n\t\t * returns the nearest fastener if the distance is less than {@link Model3D#areaFastenerSearchRadius}.</ul>\n\t\t * @param {RepairDot} dot - The {@link RepairDot} object.\n\t\t * @returns {Fastener[]} An array of found fasteners.\n\t\t * <p>The <i>metadata</i> property of the returned objects has multiple JavaScript properties;\n\t\t * the name and value of each property correspond to the respective properties of the fastener.\n\t\t * Use the JavaScript <b>for (..in)</b> statement to traverse through the properties.\n\t\t * @function Section#getFastenersForRepairDot\n\t\t * @see Section#getFastenerAtLocation\n\t\t */\n\t\t'getFastenersForRepairDot': {\n\t\t\tvalue: function (dot) {\n\t\t\t\tif (dot.type === 'dot') {\n\t\t\t\t\tconst fastener = this.getFastenerAtLocation(dot.location);\n\t\t\t\t\treturn fastener ? [fastener] : [];\n\t\t\t\t}\n\n\t\t\t\tif (!this.fasteners || this.fasteners.length == 0)\n\t\t\t\t\treturn [];\n\n\t\t\t\tconst vertexCount = Module._stella_dot_getAreaDataComponentSize(dot._peer, 0);\n\t\t\t\tif (!vertexCount)\n\t\t\t\t\treturn [];\n\n\t\t\t\tlet p = Module._stella_dot_getAreaDataComponent(dot._peer, 4) >> 2; // offsets\n\t\t\t\tlet contourOffset = HEAPF32[p];\n\t\t\t\tif (contourOffset <= 0)\n\t\t\t\t\tcontourOffset = Model3D.instance.areaContourOffset;\n\t\t\t\tconst offset = this.translation,\n\t\t\t\t\tstart = {\n\t\t\t\t\t\tx: dot.location.x - offset.x - dot.normal.x * contourOffset,\n\t\t\t\t\t\ty: dot.location.y - offset.y - dot.normal.y * contourOffset,\n\t\t\t\t\t\tz: dot.location.z - offset.z - dot.normal.z * contourOffset\n\t\t\t\t\t},\n\t\t\t\t\tisArea = dot.type === 'area',\n\t\t\t\t\tbestFasteners = [];\n\n\t\t\t\tif (isArea && !this.midpoints || this.midpoints.length == 0)\n\t\t\t\t\treturn [];\n\n\t\t\t\tconst vertices = [];\n\t\t\t\tlet min = 9e9,\n\t\t\t\t\tmax = -9e9;\n\t\t\t\t// Analyze dot.vertices\n\t\t\t\tp = Module._stella_dot_getAreaDataComponent(dot._peer, 0) >> 2;\n\t\t\t\tfor (let i = 0; i < vertexCount; ++i) {\n\t\t\t\t\tconst x = start.x + HEAPF32[p++],\n\t\t\t\t\t\ty = start.y + HEAPF32[p++],\n\t\t\t\t\t\tz = start.z + HEAPF32[p++],\n\t\t\t\t\t\ts = x * .36 + y * .48 + z * .8;\n\t\t\t\t\tif (min > s)\n\t\t\t\t\t\tmin = s;\n\t\t\t\t\tif (max < s)\n\t\t\t\t\t\tmax = s;\n\t\t\t\t\tvertices.push(isArea ?\n\t\t\t\t\t\t{f: Math.atan2(x, y - getMidpointWithZ(this.midpoints, z)), z: z} :\n\t\t\t\t\t\t{x: x, y: y, z: z});\n\t\t\t\t}\n\n\t\t\t\tconst fasteners = this.fasteners;\n\t\t\t\tlet left = 0,\n\t\t\t\t\tright = fasteners.length - 1;\n\t\t\t\twhile (right > left + 1) {\n\t\t\t\t\tconst middle = Math.floor((left + right) / 2);\n\t\t\t\t\tif (fasteners[middle]._projection < min)\n\t\t\t\t\t\tleft = middle;\n\t\t\t\t\telse\n\t\t\t\t\t\tright = middle;\n\t\t\t\t}\n\n\t\t\t\tif (isArea) {\n\t\t\t\t\t// Surface\n\t\t\t\t\tvertices.push(vertices[0]);\n\t\t\t\t\tfor (let i = right; i < fasteners.length; ++i) {\n\t\t\t\t\t\tconst f = fasteners[i];\n\t\t\t\t\t\tif (f._projection > max)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tlet counter = 0;\n\t\t\t\t\t\tfor (let j = 0; j < vertexCount; j++) {\n\t\t\t\t\t\t\tconst c = vertices[j],\n\t\t\t\t\t\t\t\td = vertices[j + 1],\n\t\t\t\t\t\t\t\tl = f.location;\n\t\t\t\t\t\t\tif (c.z < l.z || d.z < l.z) {\n\t\t\t\t\t\t\t\tconst angle = Math.atan2(l.x, l.y - getMidpointWithZ(this.midpoints, l.z));\n\t\t\t\t\t\t\t\tlet f1 = c.f;\n\t\t\t\t\t\t\t\tif (f1 < angle - 3.1416)\n\t\t\t\t\t\t\t\t\tf1 += 6.2832;\n\t\t\t\t\t\t\t\tif (f1 > angle + 3.1416)\n\t\t\t\t\t\t\t\t\tf1 -= 6.2832;\n\t\t\t\t\t\t\t\tlet f2 = d.f;\n\t\t\t\t\t\t\t\tif (f2 < f1 - 3.1416)\n\t\t\t\t\t\t\t\t\tf2 += 6.2832;\n\t\t\t\t\t\t\t\tif (f2 > f1 + 3.1416)\n\t\t\t\t\t\t\t\t\tf2 -= 6.2832;\n\t\t\t\t\t\t\t\tif ((f1 < angle) != (f2 < angle)) {\n\t\t\t\t\t\t\t\t\tconst z = c.z + (d.z - c.z) * (angle - f1) / (f2 - f1);\n\t\t\t\t\t\t\t\t\tif (z < l.z)\n\t\t\t\t\t\t\t\t\t\tcounter += (f1 < f2) ? 1 : -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (counter != 0) {\n\t\t\t\t\t\t\tbestFasteners.push(f);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bestFasteners.length == 0) {\n\t\t\t\t\t\tconst searchRadius = Model3D.instance.areaFastenerSearchRadius;\n\t\t\t\t\t\tfor (; left > 0; --left)\n\t\t\t\t\t\t\tif (fasteners[left - 1]._projection < min - searchRadius)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tlet best = null;\n\t\t\t\t\t\tfor (let i = left, minDistance = searchRadius; i < fasteners.length; ++i) {\n\t\t\t\t\t\t\tconst f = fasteners[i];\n\t\t\t\t\t\t\tif (f._projection > max + searchRadius)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tp = Module._stella_dot_getAreaDataComponent(dot._peer, 0) >> 2;\n\t\t\t\t\t\t\tfor (let j = 0; j < vertexCount; ++j) {\n\t\t\t\t\t\t\t\tconst l = f.location,\n\t\t\t\t\t\t\t\t\tx = start.x + HEAPF32[p++] - l.x,\n\t\t\t\t\t\t\t\t\ty = start.y + HEAPF32[p++] - l.y,\n\t\t\t\t\t\t\t\t\tz = start.z + HEAPF32[p++] - l.z,\n\t\t\t\t\t\t\t\t\ts = Math.sqrt(x * x + y * y + z * z);\n\t\t\t\t\t\t\t\tif (minDistance > s) {\n\t\t\t\t\t\t\t\t\tminDistance = s;\n\t\t\t\t\t\t\t\t\tbest = f;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (best) {\n\t\t\t\t\t\t\tbestFasteners.push(best);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Polyline\n\t\t\t\t\tconst searchRadius = Model3D.instance.fastenerSearchRadius;\n\t\t\t\t\tfor (; left > 0; --left)\n\t\t\t\t\t\tif (fasteners[left - 1]._projection < min - searchRadius)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\tfor (let i = left; i < fasteners.length; ++i) {\n\t\t\t\t\t\tconst fastener = fasteners[i];\n\t\t\t\t\t\tif (fastener._projection > max + searchRadius)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tfor (let j = 0; j < vertexCount - 1; ++j) {\n\t\t\t\t\t\t\tconst distance = fastener.location.distanceToSegment(vertices[j], vertices[j + 1]);\n\t\t\t\t\t\t\tif (distance < searchRadius) {\n\t\t\t\t\t\t\t\tbestFasteners.push(fastener);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn bestFasteners;\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns a string representation of the section object.\n\t\t * @returns {string}\n\t\t * @function Section#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: function () {\n\t\t\t\treturn `Section { id=\"${this.id}\", name=\"${this.name}\", isLoaded=${this.isLoaded}, fragments=[${this.fragments} }`;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * An opaque object handle which can be used in miscellaneous Solo.app functions.\n\t\t * @type number\n\t\t * @readonly\n\t\t * @name Section#handle\n\t\t */\n\t\t'handle': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? Module._stella_section_getNode(this._peer) : 0;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Restores the default display state.\n\t\t * @function Section#reset\n\t\t */\n\t\t'reset': {\n\t\t\tvalue: function () {\n\t\t\t\tthis.hidden = false;\n\t\t\t\tthis.repairDotsHidden = false;\n\t\t\t\tthis.restoreTransparency();\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t});\n\n\tfunction sectionDidAttachToModel(section, model) {\n\t\tconst sp = stackSave(),\n\t\t\tfragmentCount = section.fragments.length,\n\t\t\tpeers = stackAlloc(fragmentCount * 4);\n\t\tModule._stella_section_release(section._peer);\n\t\tsection._peer = 0;\n\t\tlet p = peers >> 2;\n\t\tsection.fragments.forEach(fragment => HEAPU32[p++] = fragment._acquirePeer());\t\t\n\t\tsection._peer = Module.ccall('stella_section_create', 'number', ['string', 'number', 'number'], [section.id, peers, fragmentCount]);\n\t\tstackRestore(sp);\n\n\t\tif (section.zones)\n\t\t\tModule.ccall('stella_section_setZoneURL', 'null', ['number', 'string'], [section._peer, section.zones._url]);\n\n\t\tconst t = section._state.translation,\n\t\t\tr = section._state.rotation;\n\t\tModule._stella_model_addSection(section._peer);\n\t\tModule._stella_section_setTranslation(section._peer, t.x, t.y, t.z);\n\t\tModule._stella_section_setRotation(section._peer, r.x, r.y, r.z, r.angle);\n\t\tModule._stella_section_setHidden(section._peer, section._state.hidden);\n\t}\n\n\tfunction sectionDidDetachFromModel(section, model) {\n\t\tsection.fragments.forEach(fragment => fragment._releasePeer());\n\t\tif (section.zones)\n\t\t\tsection.zones._unload();\n\t\tModule._stella_model_removeSection(section._peer);\n\t\tModule._stella_section_release(section._peer);\n\t\tsection._peer = 0;\n\t\tsection._state.loaded = false;\n\t\tmodel._rebuildStructures();\n\t\tmodel.unhighlightFasteners();\n\t}\n\n\tfunction getStructureClassFromName(name) {\n\t\tconst i = name.indexOf('_');\n\t\treturn i < 0 ? name : name.substr(0, i);\n\t}\n\n\t/**\n\t * Constructs a new Structure object. Application should not create instances of Structure objects\n\t * using this constructor. It is published in public namespace only for purposes like type comparison, e.g.\n\t * <br/><code>if (object.constructor === Structure) {console.log('structure object');}</code>\n\t * @class\n\t * @name Structure\n\t */\n \tfunction Structure(name, fragment, peer) {\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The unique identifier of the structure element.\n\t\t\t * @type string\n\t\t\t * @name Structure#id\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'id': { value: name, enumerable: true },\n\t\t\t/**\n\t\t\t * The name of the structure element. At the moment, it is an alias to the id property.\n\t\t\t * @type string\n\t\t\t * @name Structure#name\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'name': { value: name, enumerable: true },\n\t\t\t/**\n\t\t\t * The name of the structure class.\n\t\t\t * @type string\n\t\t\t * @name Structure#structureClass\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'structureClass': { value: getStructureClassFromName(name), enumerable: true },\n\t\t\t/**\n\t\t\t * The section fragment that contains this structure element.\n\t\t\t * @type SectionFragment\n\t\t\t * @name Structure#fragment\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'fragment': { value: fragment, enumerable: true },\n\t\t\t/**\n\t\t\t * The section that contains this structure element.\n\t\t\t * @type ?Section\n\t\t\t * @name Structure#section\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'section': { value: fragment.section, enumerable: true },\n\t\t\t/**\n\t\t\t * Section identifier of the structure element.\n\t\t\t * @type string\n\t\t\t * @name Structure#sectionID\n\t\t\t * @readonly\n\t\t\t * @deprecated Use the {@link Structure#section} property instead\n\t\t\t */\n\t\t\t'sectionID': { value: fragment.section.id, enumerable: true },\n\t\t\t'_peer': { value: peer ? peer : 0, writable: true }\n\t\t});\n\t\tif (peer)\n\t\t\tModule._stella_item_retain(peer);\n\t}\n\n\tObject.defineProperties(Structure.prototype, {\n\t\t/**\n\t\t * Specifies the visibility of the structure element.\n\t\t * @type boolean\n\t\t * @name Structure#hidden\n\t\t */\n\t\t'hidden': {\n\t\t\tget: function () { return !!(this._peer && Module._stella_item_isHidden(this._peer)); },\n\t\t\tset: function (value) { if (this._peer) Module._stella_item_setHidden(this._peer, value); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the transparency level of the structure element.\n\t\t * @type number\n\t\t * @name Structure#transparency\n\t\t */\n\t\t'transparency': {\n\t\t\tget: function () { return this._peer ? Module._stella_element_getTransparency(this._peer) : 0; },\n\t\t\tset: function (value) { if (this._peer) Module._stella_element_setTransparency(this._peer, value); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the transparency level of the structure element.\n\t\t * @type boolean\n\t\t * @name Structure#highlighted\n\t\t */\n\t\t'highlighted': {\n\t\t\tget: function () { return this._peer && !!Module._stella_item_isHighlighted(this._peer); },\n\t\t\tset: function (value) { if (this._peer) Module._stella_item_setHighlighted(this._peer, value, true); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Highlights or clears the highlight of the structure element.\n\t\t * @param {boolean} highlighted - Specifies whether the structure element should be highlighted.\n\t\t * @param {boolean} [animated=true] - An optional boolean value which specifies whether the transition is to be animated.\n\t\t * @function Structure#highlight\n\t\t */\n\t\t'highlight': {\n\t\t\tvalue: function (highlighted) { if (this._peer) Module._stella_item_setHighlighted(this._peer, highlighted, typeof animated === 'undefined' || !!animated); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Sets the new color of the structure element.\n\t\t * @param {number[]} color - An array of three numbers [r, g, b]. Every RGB component in the array is a number in range [0...1].\n\t\t * @function Structure#setColor\n\t\t */\n\t\t'setColor': {\n\t\t\tvalue: function (color) { if (this._peer) Module._stella_element_setColor(this._peer, color[0], color[1], color[2], true); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Restores the initial color of the structure element.\n\t\t * @function Structure#restoreColor\n\t\t */\n\t\t'restoreColor': {\n\t\t\tvalue: function () { if (this._peer) Module._stella_element_restoreColor(this._peer, true); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns the distance from the structure element to the specified point.\n\t\t * @param {Vec3f} point - The {@link Vec3f} object.\n\t\t * @returns {number}\n\t\t * @function Structure#getDistanceToPoint\n\t\t */\n\t\t'getDistanceToPoint': {\n\t\t\tvalue: function (point) { return this._peer ? Module._stella_element_getDistanceToPoint(this._peer, point.x, point.y, point.z) : -1; },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns a string representation of the object.\n\t\t * @returns {string}\n\t\t * @function Structure#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: defaultToString\n\t\t},\n\t\t/**\n\t\t * An opaque object handle which can be used in miscellaneous Solo.app functions.\n\t\t * @type number\n\t\t * @readonly\n\t\t * @name Structure#handle\n\t\t */\n\t\t'handle': {\n\t\t\tget: function () {\n\t\t\t\treturn this._peer ? Module._stella_item_getNode(this._peer) : 0;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Restores the default display state.\n\t\t * @function Structure#reset\n\t\t */\n\t\t'reset': {\n\t\t\tvalue: function () {\n\t\t\t\tconst structureClass = Model3D.instance.structureClasses.get(this.structureClass);\n\t\t\t\tthis.hidden = structureClass ? structureClass.hidden : false;\n\t\t\t\tthis.transparency = structureClass ? structureClass.transparency : 0;\n\t\t\t\tthis.restoreColor();\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * Constructs an instance of the structure class object.\n\t * @classdesc Represents an airplane structure element.\n\t * @param {string} name - The name of class for airplane structure element.\n\t * @class\n\t * @name StructureClass\n\t */\n\tfunction StructureClass(name) {\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The class name of for airplane structure element, for example, \"FRM\".\n\t\t\t * @type String\n\t\t\t * @name StructureClass#name\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'name': {\n\t\t\t\tvalue: name,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Indicates whether the structures of this class belong to skin.\n\t\t\t * @type boolean\n\t\t\t * @name StructureClass#isSkin\n\t\t\t * @readonly\n\t\t\t * @see Model3D#SKIN_STRUCTURE_LIST\n\t\t\t */\n\t\t\t'isSkin': {\n\t\t\t\tvalue: Model3D.instance.SKIN_STRUCTURE_LIST.indexOf(name) >= 0,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Indicates whether the structures of this class are layers.\n\t\t\t * @type boolean\n\t\t\t * @name StructureClass#isLayer\n\t\t\t * @readonly\n\t\t\t * @see Model3D#LAYER_STRUCTURE_LIST\n\t\t\t */\n\t\t\t'isLayer': {\n\t\t\t\tvalue: Model3D.instance.LAYER_STRUCTURE_LIST.indexOf(name) >= 0,\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t});\n\t}\n\n\tObject.defineProperties(StructureClass.prototype, {\n\t\t/**\n\t\t * Specifies the transparency level of the airplane structure elements which belong to this structure class.\n\t\t * <p>Changing the value of this property updates the transparency of the structure elements with the animated transition.\n\t\t * If you want to change the value immediately, use the {@link StructureClass#setTransparency} method instead.\n\t\t * @type number\n\t\t * @name StructureClass#transparency\n\t\t */\n\t\t'transparency': {\n\t\t\tget: function () { return Module.ccall('stella_model_getStructureClassTransparency', 'number', ['string'], [this.name]); },\n\t\t\tset: function (value) { Module.ccall('stella_model_setStructureClassTransparency', 'null', ['string', 'number'], [this.name, value, true]); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Sets the transparency level of airplane structure elements which belong to this structure class,\n\t\t * optionally animating the transition between states.\n\t\t * @param {number} transparency - The transparency level.\n\t\t * @param {boolean} [animated=true] - An optional boolean value which specifies whether the transition is to be animated.\n\t\t * @function StructureClass#setTransparency\n\t\t */\n\t\t'setTransparency': {\n\t\t\tvalue: function (transparency, animated) {\n\t\t\t\tModule.ccall('stella_model_setStructureClassTransparency', 'null', ['string', 'number'], \n\t\t\t\t[this.name, transparency, typeof animated === 'undefined' || !!animated]);\n\t\t\t},\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the visibility of the airplane structure elements which belong to this structure class.\n\t\t * @type boolean\n\t\t * @name StructureClass#hidden\n\t\t */\n\t\t'hidden': {\n\t\t\tget: function () { return !!Module.ccall('stella_model_isStructureClassHidden', 'number', ['string'], [this.name]); },\n\t\t\tset: function (value) { Module.ccall('stella_model_setStructureClassHidden', 'null', ['string', 'number', 'number'], [this.name, value, true]); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Specifies the visibility of the repair dots corresponding to airplane structure elements of the structure class.\n\t\t * @type boolean\n\t\t * @name StructureClass#repairDotsHidden\n\t\t */\n\t\t'repairDotsHidden': {\n\t\t\tget: function () { return !!Module.ccall('stella_model_areDotsWithStructureClassHidden', 'number', ['string'], [this.name]); },\n\t\t\tset: function (value) { Module.ccall('stella_model_setDotsWithStructureClassHidden', 'null', ['string', 'number', 'number'], [this.name, value, true]); },\n\t\t\tenumerable: true\n\t\t},\n\t\t/**\n\t\t * Returns a string representation of the structure class object.\n\t\t * @returns {string}\n\t\t * @function StructureClass#toString\n\t\t */\n\t\t'toString': {\n\t\t\tvalue: defaultToString\n\t\t}\n\t});\n\n\tfunction getObjectList(getter) {\n\t\tconst list = getter(),\n\t\t\tnames = Object.create(null);\n\t\tif (list) {\n\t\t\tlet name;\n\t\t\tfor (let p = list >> 2; name = UTF8ToString(HEAPU32[p]); ++p)\n\t\t\t\tnames[name] = name;\n\t\t\tModule._free(list);\n\t\t}\n\t\treturn names;\n\t}\n\n\tfunction getNearestStructures(x, y, z, skipTransparent) {\n\t\tconst list = Module._stella_model_copyNearestElementList(x, y, z, skipTransparent),\n\t\t\tnames = [];\n\t\tif (list) {\n\t\t\tlet name;\n\t\t\tfor (let p = list >> 2; name = UTF8ToString(HEAPU32[p]); ++p)\n\t\t\t\tnames.push(name);\n\t\t\tModule._free(list);\n\t\t}\n\t\treturn names;\n\t}\n\n\tfunction defineReadOnlyCollection(impl, items) {\n\t\tObject.defineProperties(impl, {\n\t\t\t'get': {\n\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\treturn items[itemID] ? items[itemID] : null;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'has': {\n\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\treturn !!items[itemID];\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'forEach': {\n\t\t\t\tvalue: function (callback) {\n\t\t\t\t\tfor (const id in items)\n\t\t\t\t\t\tcallback(items[id]);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'find': {\n\t\t\t\tvalue: function (callback) {\n\t\t\t\t\tfor (const id in items)\n\t\t\t\t\t\tif (callback(items[id]))\n\t\t\t\t\t\t\treturn items[id];\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'toArray': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\treturn Object.values(items);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Constructs a new Model3D object.\n\t * @name Model3D\n\t * @classdesc This singleton class is used to work with the 3D model of the airplane.\n\t * @class\n\t */\n\tfunction Model3D() {\n\t\tif (Model3D.instance)\n\t\t\treturn Model3D.instance;\n\n\t\t/**\n\t\t * The singleton instance of Model3D.\n\t\t * @name Model3D.instance\n\t\t * @type Model3D\n\t\t */\n\t\tObject.defineProperty(Model3D, 'instance', { value: this, enumerable: true });\n\n\t\tconst repairDots = Object.create(null),\n\t\t\tsections = Object.create(null),\n\t\t\tstructureClasses = Object.create(null),\n\t\t\trepairDotsCollection = new RepairDots(repairDots, this),\n\t\t\tsectionsCollection = new Sections(sections, this),\n\t\t\tstructureClassesCollection = new StructureClasses(structureClasses),\n\t\t\tnullObject = {},\n\t\t\tfastenerHighlightPool = [],\n\t\t\tfastenerHighlights = new Map(),\n\t\t\tfastenerHighlightColor = [1, 0, 0];\n\n\t\tlet fastenerHighlightGroup = 0,\n\t\t\tfastenerHighlightShapeNode = 0;\n\n\t\tfunction createNode(syntax) {\n\t\t\tlet nodes = Module.ccall('tiramisu_createObjects', 'number', ['string', 'number', 'string'], [syntax, 0, null]),\n\t\t\t\tnode = nodes ? HEAPU32[nodes >> 2] : 0;\n\t\t\tModule._free(nodes);\n\t\t\treturn node;\n\t\t}\n\t\tfunction pickerHit_asObject(addr) {\n\t\t\tconst p = addr >> 2;\n\t\t\treturn {\n\t\t\t\t'item': itemWithPeer(HEAPU32[p]),\n\t\t\t\t'location': new Vec3f(HEAPF32[p + 1], HEAPF32[p + 2], HEAPF32[p + 3]),\n\t\t\t\t'normal': new Vec3f(HEAPF32[p + 4], HEAPF32[p + 5], HEAPF32[p + 6]),\n\t\t\t\t'distance': HEAPF32[p + 7]\n\t\t\t};\n\t\t}\n\t\tfunction pickerHits_asArray(addr) {\n\t\t\tconst count = HEAPU32[addr >> 2],\n\t\t\t\thits = [];\n\t\t\tfor (let i = 0, hit = addr + 4; i < count; ++i, hit += 32)\n\t\t\t\thits.push(pickerHit_asObject(hit));\n\t\t\treturn hits;\n\t\t}\n\t\tfunction pickerHits_forEachItem(addr, lambda) {\n\t\t\tconst count = HEAPU32[addr >> 2];\n\t\t\tfor (let i = 0, hit = addr + 4; i < count; ++i, hit += 32)\n\t\t\t\tlambda(itemWithPeer(HEAPU32[hit >> 2]));\n\t\t}\n\t\tfunction valueWithPeer(object, peer) {\n\t\t\tfor (let i in object)\n\t\t\t\tif (object[i]._peer === peer)\n\t\t\t\t\treturn object[i];\n\t\t\treturn null;\n\t\t}\n\t\tfunction itemWithPeer(peer) {\n\t\t\tif (!peer)\n\t\t\t\treturn null;\n\t\t\tif (Module._stella_item_getType(peer) === 1)\n\t\t\t\treturn valueWithPeer(repairDots, peer);\n\n\t\t\tconst section = valueWithPeer(sections, Module._stella_element_getSection(peer));\n\t\t\tif (section) {\n\t\t\t\tconst fragmentIndex = Module._stella_element_getFragmentIndex(peer);\n\t\t\t\tconst fragment = section.fragments[fragmentIndex];\n\t\t\t\tif (fragment)\n\t\t\t\t\treturn valueWithPeer(fragment._state.structures, peer);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tfunction layersWithElementCollection(collection) {\n\t\t\tif (collection == 0)\n\t\t\t\treturn {};\n\n\t\t\tlet p = collection >> 2;\n\t\t\tconst count = HEAPU32[p++],\n\t\t\t\thasWeights = HEAPU32[p++],\n\t\t\t\tlayers = {};\n\n\t\t\tfor (let i = 0; i < count; ++i, p += 2) {\n\t\t\t\tconst item = itemWithPeer(HEAPU32[p]),\n\t\t\t\t\tclassName = item.structureClass;\n\t\t\t\tif (!layers[className])\n\t\t\t\t\tlayers[className] = [];\n\t\t\t\tlayers[className].push(hasWeights ?  { item: item, weight: HEAPF32[p + 1] } : { item: item });\n\t\t\t}\n\t\t\tObject.values(layers).forEach(items => items.sort((a, b) => {\n\t\t\t\tif (hasWeights) {\n\t\t\t\t\tconst r = b.weight - a.weight;\n\t\t\t\t\tif (r)\n\t\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\treturn a.item.name.localeCompare(b.item.name);\n\t\t\t}));\n\t\t\treturn layers;\n\t\t}\n\t\t\n\t\t/**\n\t\t * The default transparency level. The value of 0 means that the model is opaque, 1 - fully transparent.\n\t\t * @name Model3D#DEFAULT_TRANSPARENCY_LEVEL\n\t\t * @type number\n\t\t * @default\n\t\t */\n\t\tthis.DEFAULT_TRANSPARENCY_LEVEL = 0.6;\n\t\t/**\n\t\t * Specifies whether the framework should skip the translucent shapes when handling the mouse over event.\n\t\t * @name Model3D#SKIP_TRANSPARENT_OBJECT\n\t\t * @type boolean\n\t\t * @default true\n\t\t */\n\t\tthis.SKIP_TRANSPARENT_OBJECT = true;\n\t\t/**\n\t\t * Specifies whether the framework should skip the translucent shapes when handling the mouse up event.\n\t\t * @name Model3D#SKIP_TRANSPARENT_OBJECT_ON_CLICK\n\t\t * @type boolean\n\t\t * @default false\n\t\t */\n\t\tthis.SKIP_TRANSPARENT_OBJECT_ON_CLICK = false;\n\t\t/**\n\t\t * The default RepairDot flash interval in seconds.\n\t\t * @name Model3D#DOT_FLASH_INTERVAL\n\t\t * @type number\n\t\t * @default 3\n\t\t * @see RepairDot#flash\n\t\t */\n\t\tthis.DOT_FLASH_INTERVAL = 3;\n\t\t/**\n\t\t * The default RepairDot flash frequency in hertz.\n\t\t * @name Model3D#DOT_FLASH_FREQUENCY\n\t\t * @type number\n\t\t * @default 2\n\t\t * @see RepairDot#flash\n\t\t */\n\t\tthis.DOT_FLASH_FREQUENCY = 2;\n\t\t/**\n\t\t * Specifies whether all structure classes are visible on load. The value of <i>false</i> means that the skin structures and layers are hidden on load.\n\t\t * @name Model3D#ALL_CLASS_VISIBLE_ON_LOAD\n\t\t * @type boolean\n\t\t * @default false\n\t\t */\n\t\tthis.ALL_CLASS_VISIBLE_ON_LOAD = false;\n\t\t/**\n\t\t * An array of the structure classes which belong to the skin.\n\t\t * @name Model3D#SKIN_STRUCTURE_LIST\n\t\t * @type string[] \n\t\t * @default [\"RDM\", \"WIN\", \"DR\", \"SKN\", \"FC\", \"FRG\"]\n\t\t */\n\t\tthis.SKIN_STRUCTURE_LIST = [\"RDM\", \"WIN\", \"DR\", \"SKN\", \"FC\", \"FRG\"];\n\t\t/**\n\t\t * An array of the structure classes which are layers.\n\t\t * @name Model3D#LAYER_STRUCTURE_LIST\n\t\t * @type string[] \n\t\t * @default [\"PNR\", \"ADLZ\", \"ADLA\", \"RDLZ\", \"THK\", \"FASTENERS\", \"STALINES\"]\n\t\t */\n\t\tthis.LAYER_STRUCTURE_LIST = [\"PNR\", \"ADLZ\", \"ADLA\", \"RDLZ\", \"THK\", \"FASTENERS\", \"STALINES\"];\n\t\t/**\n\t\t * The name of the layer with fasteners.\n\t\t * @name Model3D#FASTENER_LAYER\n\t\t * @type string \n\t\t * @default \"FASTENERS\"\n\t\t */\n\t\tthis.FASTENER_LAYER = \"FASTENERS\";\n\t\t/**\n\t\t * The maximum distance in inches from a point to the nearest structure for the point to belong to that structure.\n\t\t * @name Model3D#DOT_TO_STRUCTURE_DISTANCE\n\t\t * @type number\n\t\t * @default 2\n\t\t * @see Model3D#getNearestStructuresForDot\n\t\t */\n\t\tthis.DOT_TO_STRUCTURE_DISTANCE = 2;\n\t\t/**\n\t\t * Scale factor which is used to convert between aircraft and VRML units.<br>\n\t\t * Aircraft Unit = VRML Unit (1 meter) * AC_SCALE_FACTOR<br>\n\t\t * The default value is 1/0.0254 = 39.37.\n\t\t * @type number\n\t\t * @name Model3D#AC_SCALE_FACTOR\n\t\t * @default 39.37\n\t\t */\n\t\tthis.AC_SCALE_FACTOR = 1 / 0.0254;\n\n\t\t/**\n\t\t * The offset of the contour (for lines and areas), in inches. Used only when the {@link Model3D#completeAreaDot} method is called;\n\t\t * affects the generated geometry and does not affect the shape of the contour in the future.\n\t\t * @name Model3D#areaContourOffset\n\t\t * @type number\n\t\t * @default 1.5\n\t\t */\n\t\tthis.areaContourOffset = 1.5;\n\t\t/**\n\t\t * The offset of the area surface, in inches. Used only when the {@link Model3D#completeAreaDot} method is called;\n\t\t * does not affect the shape of the surface in the future.\n\t\t * @name Model3D#areaSurfaceOffset\n\t\t * @type number\n\t\t * @default 3\n\t\t */\n\t\tthis.areaSurfaceOffset = 3;\n\t\t/**\n\t\t * This property affects the contour subdivision for smoothing. The framework subdivides the contour\n\t\t * until all edges are not longer than this value (in inches). Used only when the {@link Model3D#completeAreaDot}\n\t\t * method is called and does not affect the shape of the surface in the future.\n\t\t * @name Model3D#maxAreaEdgeLength\n\t\t * @type number\n\t\t * @default 20\n\t\t */\n\t\tthis.maxAreaEdgeLength = 20;\n\n\t\t/**\n\t\t * Specifies the maximum search radius for fasteners relative to the location in the 3D space, in inches.\n\t\t * When looking up the nearest fastener, only fasteners within this radius are taken into account.\n\t\t * @name Model3D#fastenerSearchRadius\n\t\t * @type number\n\t\t * @default 3\n\t\t * @see Section#getFastenerAtLocation\n\t\t * @see Section#getFastenersForRepairDot\n\t\t */\n\t\tthis.fastenerSearchRadius = 3;\n\n\t\t/**\n\t\t * Specifies the maximum search radius for fasteners relative to a repair area, in inches. When the repair area\n\t\t * does not contain any fasteners, the framework continues to look up the nearest fastener within this distance.\n\t\t * @name Model3D#areaFastenerSearchRadius\n\t\t * @type number\n\t\t * @default 12\n\t\t * @see Section#getFastenersForRepairDot\n\t\t */\n\t\tthis.areaFastenerSearchRadius = 12;\n\n\t\t/**\n\t\t * Specifies the radius of the semi-transparent sphere used to highlight selected fasteners, in inches.\n\t\t * @name Model3D#fastenerHighlightRadius\n\t\t * @type number\n\t\t * @default 1.5\n\t\t * @see Model3D#highlightFasteners\n\t\t */\n\t\tthis.fastenerHighlightRadius = 1.5;\n\n\t\t/**\n\t\t * The constructor of the repair dot collection is not exported to the public namespace. Application is not supposed to\n\t\t * create collection instances, since the collection if fully managed by the framework.\n\t\t * @classdesc Represents a named collection of the repair dots.\n\t\t * @see RepairDot\n\t\t * @name RepairDots\n\t\t * @class\n\t\t */\n\t\tfunction RepairDots(items, model) {\n\t\t\t/**\n\t\t\t * Returns the repair dot with the given identifier. If failed, returns <i>null</i>.\n\t\t\t * @param {string} dotID\n\t\t\t * @returns {?RepairDot}\n\t\t\t * @see RepairDot#id\n\t\t\t * @function RepairDots#get\n\t\t\t */\n\t\t\t/**\n\t\t\t * Returns the contents of the collection as an array of repair dots.\n\t\t\t * @returns {RepairDot[]}\n\t\t\t * @function RepairDots#toArray\n\t\t\t */\n\t\t\t/**\n\t\t\t * Checks whether the collection contains the repair dot with the given identifier.\n\t\t\t * @param {string} dotID - The identifier of the repair dot.\n\t\t\t * @returns {boolean} Returns a boolean value that indicates whether the repair dot exists in the collection.\n\t\t\t * @see RepairDot#id\n\t\t\t * @function RepairDots#has\n\t\t\t */\n\t\t\t/**\n\t\t\t * Executes the provided function once for each item in the collection.\n\t\t\t * @param {Function} callback - A function to execute for each item in the collection. Its return value is discarded.\n\t\t\t * @function RepairDots#forEach\n\t\t\t */\n\t\t\t/**\n\t\t\t * Finds the first item in the collection that satisfies the provided testing function.\n\t\t\t * @param {Function} callback - A function to execute for each element in the collection. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise.\n\t\t\t * @returns {?RepairDot}\n\t\t\t * @function RepairDots#find\n\t\t\t */\n\t\t\tdefineReadOnlyCollection(this, items);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\t/**\n\t\t\t\t * Adds the repair dot to the collection.\n\t\t\t\t * @param {RepairDot} dot - The repair dot object.\n\t\t\t\t * @function RepairDots#add\n\t\t\t\t */\n\t\t\t\t'add': {\n\t\t\t\t\tvalue: function (item) {\n\t\t\t\t\t\tif ((item instanceof RepairDot) && !items[item.id]) {\n\t\t\t\t\t\t\titems[item.id] = item;\n\t\t\t\t\t\t\tif (model)\n\t\t\t\t\t\t\t\tdotDidAttachToModel(item, model);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Removes the repair dot specified by its identifier from the collection.\n\t\t\t\t * @param {string|RepairDot} item - The identifier of the repair dot or the repair dot to remove.\n\t\t\t\t * @function RepairDots#remove\n\t\t\t\t */\n\t\t\t\t'remove': {\n\t\t\t\t\tvalue: function (item) {\n\t\t\t\t\t\tif (!(item instanceof RepairDot))\n\t\t\t\t\t\t\titem = items[item];\n\t\t\t\t\t\telse if (items[item.id] != item)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif (item) {\n\t\t\t\t\t\t\tif (model)\n\t\t\t\t\t\t\t\tdotDidDetachFromModel(item, model);\n\t\t\t\t\t\t\tdelete items[item.id];\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Removes all repair dots bound to the airplane section with sectionID identifier.\n\t\t\t\t * @param {string|Section} section\n\t\t\t\t * @see Section#id\n\t\t\t\t * @see RepairDot#sectionID\n\t\t\t\t * @function RepairDots#removeForSection\n\t\t\t\t */\n\t\t\t\t'removeForSection': {\n\t\t\t\t\tvalue: function (section) {\n\t\t\t\t\t\tconst sectionID = (section instanceof Section) ? section.id : section;\n\t\t\t\t\t\tfor (let i in items) {\n\t\t\t\t\t\t\tif (items[i].sectionID != sectionID)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif (model)\n\t\t\t\t\t\t\t\tdotDidDetachFromModel(items[i]);\n\t\t\t\t\t\t\tdelete items[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Clears the repair dots collection.\n\t\t\t\t * @function RepairDots#clear\n\t\t\t\t */\n\t\t\t\t'clear': {\n\t\t\t\t\tvalue: function () {\n\t\t\t\t\t\tfor (let i in items) {\n\t\t\t\t\t\t\tif (model)\n\t\t\t\t\t\t\t\tdotDidDetachFromModel(items[i]);\n\t\t\t\t\t\t\tdelete items[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t});\t\t\n\t\t}\n\t\t/**\n\t\t * The constructor of the section collection is not exported to the public namespace. Application is not supposed to\n\t\t * create collection instances, since the collection if fully managed by Stella framework.\n\t\t * @classdesc Represents a named collection of the airplane sections.\n\t\t * @see Section\n\t\t * @name Sections\n\t\t * @class\n\t\t */\n\t\tfunction Sections(items, model) {\n\t\t\t/**\n\t\t\t * Finds the section object by its identifier.\n\t\t\t * @param {string} sectionID\n\t\t\t * @returns {?Section}\n\t\t\t * @see Section#id\n\t\t\t * @function Sections#get\n\t\t\t */\n\t\t\t/**\n\t\t\t * Returns the contents of the collection as an array of section objects.\n\t\t\t * @returns {Section[]}\n\t\t\t * @function Sections#toArray\n\t\t\t */\n\t\t\t/**\n\t\t\t * Checks whether the collection contains the section object with the sectionID identifier.\n\t\t\t * @param {string} sectionID\n\t\t\t * @returns {boolean} Returns a boolean value that indicates whether the section exists in the collection.\n\t\t\t * @see Section#id\n\t\t\t * @function Sections#has\n\t\t\t */\n\t\t\t/**\n\t\t\t * Executes the provided function once for each item in the collection.\n\t\t\t * @param {Function} callback - A function to execute for each item in the collection. Its return value is discarded.\n\t\t\t * @function Sections#forEach\n\t\t\t */\n\t\t\t/**\n\t\t\t * Finds the first item in the collection that satisfies the provided testing function.\n\t\t\t * @param {Function} callback - A function to execute for each element in the collection. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise.\n\t\t\t * @returns {?Section}\n\t\t\t * @function Sections#find\n\t\t\t */\n\t\t\tdefineReadOnlyCollection(this, items);\n\n\t\t\tObject.defineProperties(this, {\n\t\t\t\t/**\n\t\t\t\t * Adds the section object to the collection.\n\t\t\t\t * @param {Section} item - The section object to be added.\n\t\t\t\t * @returns {Promise}\n\t\t\t\t * @function Sections#add\n\t\t\t\t */\n\t\t\t\t'add': {\n\t\t\t\t\tvalue: function (item) {\n\t\t\t\t\t\treturn model.addSection(item);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Removes the section object specified by its identifier from the collection.\n\t\t\t\t * @param {string|Section} item - The section identifier or the section object to remove.\n\t\t\t\t * @function Sections#remove\n\t\t\t\t */\n\t\t\t\t'remove': {\n\t\t\t\t\tvalue: function (item) {\n\t\t\t\t\t\tmodel.removeSection(item);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Clears the section collection.\n\t\t\t\t * @function Sections#clear\n\t\t\t\t */\n\t\t\t\t'clear': {\n\t\t\t\t\tvalue: function () {\n\t\t\t\t\t\tmodel.removeAllSections();\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\t/**\n\t\t * The constructor of structure part collection is not exported to the public namespace. Application is not supposed to\n\t\t * create collection instances, since the collection if fully managed by the Solo Tag framework.<br/>\n\t\t * Note that the collection is <b>read-only</b>.\n\t\t * @classdesc Represents a named collection of the structure parts.\n\t\t * @see Structure\n\t\t * @name Structures\n\t\t * @class\n\t\t */\n\t\tfunction Structures(sections) {\n\t\t\tObject.defineProperties(this, {\n\t\t\t\t/**\n\t\t\t\t * Finds the structure part object by its identifier.\n\t\t\t\t * @param {string} structureID\n\t\t\t\t * @returns {?Structure}\n\t\t\t\t * @see Structure#id\n\t\t\t\t * @function Structures#get\n\t\t\t\t */\n\t\t\t\t'get': {\n\t\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\t\tfor (const i in sections) {\n\t\t\t\t\t\t\tconst item = sections[i].structures.get(itemID);\n\t\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Checks whether the collection contains the structure part object with the structureID identifier.\n\t\t\t\t * @param {string} structureID\n\t\t\t\t * @returns {boolean} Returns a boolean value that indicates whether the structure part exists in the collection.\n\t\t\t\t * @see Structure#id\n\t\t\t\t * @function Structures#has\n\t\t\t\t */\n\t\t\t\t'has': {\n\t\t\t\t\tvalue: function (itemID) {\n\t\t\t\t\t\tfor (const i in sections)\n\t\t\t\t\t\t\tif (sections[i].structures.has(itemID))\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Executes the provided function once for each item in the collection.\n\t\t\t\t * @param {Function} callback - A function to execute for each item in the collection. Its return value is discarded.\n\t\t\t\t * @function Structures#forEach\n\t\t\t\t */\n\t\t\t\t'forEach': {\n\t\t\t\t\tvalue: function (callback) {\n\t\t\t\t\t\tfor (const i in sections)\n\t\t\t\t\t\t\tsections[i].structures.forEach(callback);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Finds the first item in the collection that satisfies the provided testing function.\n\t\t\t\t * @param {Function} callback - A function to execute for each element in the collection. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise.\n\t\t\t\t * @returns {?Structure}\n\t\t\t\t * @function Structures#find\n\t\t\t\t */\n\t\t\t\t'find': {\n\t\t\t\t\tvalue: function (callback) {\n\t\t\t\t\t\tfor (const i in sections) {\n\t\t\t\t\t\t\tconst section = sections[i].structures.find(callback);\n\t\t\t\t\t\t\tif (section)\n\t\t\t\t\t\t\t\treturn section;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Returns the contents of the collection as an array of structure objects.\n\t\t\t\t * @returns {Structure[]}\n\t\t\t\t * @function Structures#toArray\n\t\t\t\t */\n\t\t\t\t'toArray': {\n\t\t\t\t\tvalue: function () {\n\t\t\t\t\t\tlet items = [];\n\t\t\t\t\t\tfor (const i in sections)\n\t\t\t\t\t\t\titems = items.concat(sections[i].structures.toArray());\n\t\t\t\t\t\treturn items;\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: true\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * The constructor of structure classes collection is not exported to the public namespace. Application is not supposed to\n\t\t * create collection instances, since the collection if fully managed by Stella framework.<br>\n\t\t * Note that the collection is <b>read-only</b>.\n\t\t * @classdesc Represents a named collections of sections.\n\t\t * @see StructureClass\n\t\t * @name StructureClasses\n\t\t * @class\n\t\t */\n\t\tfunction StructureClasses(items) {\n\t\t\t/**\n\t\t\t * Finds the structure class object by its name.\n\t\t\t * @param {string} structureClassName\n\t\t\t * @returns {?StructureClass}\n\t\t\t * @see StructureClass#name\n\t\t\t * @function StructureClasses#get\n\t\t\t */\n\t\t\t/**\n\t\t\t * Returns the contents of the collection as an array of structure objects.\n\t\t\t * @returns {StructureClass[]}\n\t\t\t * @function StructureClasses#toArray\n\t\t\t */\n\t\t\t/**\n\t\t\t * Checks whether the collection contains the structure class object with the given name.\n\t\t\t * @param {string} structureClassName\n\t\t\t * @returns {boolean} Returns a boolean value that indicates whether structure class exists in the collection.\n\t\t\t * @see StructureClass#name\n\t\t\t * @function StructureClasses#has\n\t\t\t */\n\t\t\t/**\n\t\t\t * Executes the provided function once for each item in the collection.\n\t\t\t * @param {Function} callback - A function to execute for each item in the collection. Its return value is discarded.\n\t\t\t * @function StructureClasses#forEach\n\t\t\t */\n\t\t\t/**\n\t\t\t * Finds the first item in the collection that satisfies the provided testing function.\n\t\t\t * @param {Function} callback - A function to execute for each element in the collection. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise.\n\t\t\t * @returns {?StructureClass}\n\t\t\t * @function StructureClasses#find\n\t\t\t */\n\t\t\tdefineReadOnlyCollection(this, items);\n\t\t}\n\n\t\tfunction fragmentWithIndex(sectionPeer, index) {\n\t\t\tfor (let i in sections) {\n\t\t\t\tconst section = sections[i];\n\t\t\t\tif (section._peer === sectionPeer)\n\t\t\t\t\treturn section.fragments[index];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The exponent value which is used when calculating the dot size.\n\t\t\t * <br>Dot_size = pow(distance_from_camera, dotSizeExponent) * dotSizeScaleFactor\n\t\t\t * @name Model3D#dotSizeExponent\n\t\t\t * @type number\n\t\t\t * @default 0.5\n\t\t\t */\n\t\t\t'dotSizeExponent': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(0); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(0, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Multiplier which is used when calculating the dot size.\n\t\t\t * <br>Dot_size = pow(distance_from_camera, dotSizeExponent) * dotSizeScaleFactor\n\t\t\t * @name Model3D#dotSizeScaleFactor\n\t\t\t * @type number\n\t\t\t * @default 4\n\t\t\t */\n\t\t\t'dotSizeScaleFactor': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(1); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(1, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The exponent value which is used when calculating the contour (line/area) thickness.\n\t\t\t * <br>Thickness = pow(distance_from_camera, lineThicknessExponent) * lineThicknessScaleFactor\n\t\t\t * @name Model3D#lineThicknessExponent\n\t\t\t * @type number\n\t\t\t * @default 0.5\n\t\t\t */\n\t\t\t'lineThicknessExponent': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(2); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(2, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Multiplier which is used when calculating the contour thickness (for lines and areas).\n\t\t\t * <br>Thickness = pow(distance_from_camera, lineThicknessExponent) * lineThicknessScaleFactor\n\t\t\t * @name Model3D#lineThicknessScaleFactor\n\t\t\t * @type number\n\t\t\t * @default 4\n\t\t\t */\n\t\t\t'lineThicknessScaleFactor': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(3); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(3, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The exponent value which is used when calculating the texture scale (for areas only).\n\t\t\t * <br>Texture_scale = pow(distance_from_camera, textureScaleExponent) * textureScaleFactor\n\t\t\t * @name Model3D#textureScaleExponent\n\t\t\t * @type number\n\t\t\t * @default 0.5\n\t\t\t */\n\t\t\t'textureScaleExponent': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(4); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(4, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Multiplier which is used when calculating the texture scale (for areas only).\n\t\t\t * <br>Texture_scale = pow(distance_from_camera, textureScaleExponent) * textureScaleFactor\n\t\t\t * @name Model3D#textureScaleFactor\n\t\t\t * @type number\n\t\t\t * @default 4\n\t\t\t */\n\t\t\t'textureScaleFactor': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(5); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(5, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * The transparency level of the repair area inner surface. 0 - opaque, 1 - transparent.\n\t\t\t * @name Model3D#areaSurfaceTransparency\n\t\t\t * @type number\n\t\t\t * @default 0.3\n\t\t\t */\n\t\t\t'areaSurfaceTransparency': {\n\t\t\t\tget: function () { return Module._stella_model_getDotAppearance(6); },\n\t\t\t\tset: function (value) { return Module._stella_model_setDotAppearance(6, value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\n\t\t\t// Consistent:\n\t\t\t/**\n\t\t\t * @name Model3D#repairDots\n\t\t\t * @type RepairDots\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'repairDots': { value: repairDotsCollection, enumerable: true },\n\t\t\t/**\n\t\t\t * @name Model3D#sections\n\t\t\t * @type Sections\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'sections': { value: sectionsCollection, enumerable: true },\n\t\t\t/**\n\t\t\t * @name Model3D#structures\n\t\t\t * @type Structures\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'structures': { value: new Structures(sections), enumerable: true },\n\t\t\t/**\n\t\t\t * @name Model3D#structureClasses\n\t\t\t * @type StructureClasses\n\t\t\t * @readonly\n\t\t\t */\n\t\t\t'structureClasses': { value: structureClassesCollection, enumerable: true },\n\t\t\t/**\n\t\t\t * Specifies the visibility of the repair dots for all airplane sections.\n\t\t\t * @type boolean\n\t\t\t * @name Model3D#repairDotsHidden\n\t\t\t * @default false\n\t\t\t */\n\t\t\t'repairDotsHidden': {\n\t\t\t\tget: function () { return !!Module._stella_model_areRepairDotsHidden(); },\n\t\t\t\tset: function (value) { return Module._stella_model_setRepairDotsHidden(value); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Adds the airplane section to the section collection. The framework will load the VRML representation of the section fragments if needed.\n\t\t\t * @param {Section} section - The section object.\n\t\t\t * @returns {Promise}\n\t\t\t * @function Model3D#addSection\n\t\t\t * @see Sections#add\n\t\t\t */\n\t\t\t'addSection': {\n\t\t\t\tvalue: function (section) {\n\t\t\t\t\tif (!(section instanceof Section))\n\t\t\t\t\t\treturn Promise.reject(new Error('Invalid argument'));\n\t\t\t\t\tif (sections[section.id])\n\t\t\t\t\t\treturn Promise.reject(new Error('Section is already attached to the model'));\n\t\t\t\t\tif (m_itemsBeingLoaded.has(section))\n\t\t\t\t\t\treturn Promise.reject(new Error('Section load is already in progress'));\n\t\t\t\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\t\t\t\tm_itemsBeingLoaded.set(section, {\n\t\t\t\t\t\t\tresolve: resolve,\n\t\t\t\t\t\t\treject: reject\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsections[section.id] = section;\n\t\t\t\t\t\tsectionDidAttachToModel(section, this);\n\t\t\t\t\t});\n\t\t\t\t\treturn section.zones ? Promise.allSettled([promise, section.zones._load()]) : promise;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Removes the airplane section from the section collection.\n\t\t\t * @param {string|Section} section - The unique identifier of the airplane section or the section object to remove.\n\t\t\t * @function Model3D#removeSection\n\t\t\t * @see Sections#remove\n\t\t\t */\n\t\t\t'removeSection': {\n\t\t\t\tvalue: function (section) {\n\t\t\t\t\tif (!(section instanceof Section))\n\t\t\t\t\t\tsection = sections[section];\n\t\t\t\t\telse if (sections[section.id] != section)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (section) {\n\t\t\t\t\t\tsectionDidDetachFromModel(section, this);\n\t\t\t\t\t\tdelete sections[section.id];\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst context = m_itemsBeingLoaded.get(section);\n\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\tm_itemsBeingLoaded.delete(section);\n\t\t\t\t\t\t\tcontext.reject(new Error('Section load is cancelled'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.on_section_unloaded)\n\t\t\t\t\t\t\tthis.on_section_unloaded(section);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Clears the section collection.\n\t\t\t * @function Model3D#removeAllSections\n\t\t\t * @see Sections#clear\n\t\t\t */\n\t\t\t'removeAllSections': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tfor (let sectionID in sections)\n\t\t\t\t\t\tthis.removeSection(sectionID);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the contents of the section collection as an array of section objects.\n\t\t\t * @returns {Section[]}\n\t\t\t * @function Model3D#getSectionArray\n\t\t\t * @see Sections#toArray\n\t\t\t */\n\t\t\t'getSectionArray': {\n\t\t\t\tvalue: function () {return sectionsCollection.toArray(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the object of {@link Section} type with the given identifier which loaded in the model.\n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n \t\t\t * @returns {?Section} The section object or <i>undefined</i> if the section with the given identifier is not found in the section collection.\n \t\t\t * @function Model3D#getSection\n \t\t\t * @see Sections#get\n \t\t\t */\n\t\t\t'getSection': {\n\t\t\t\tvalue: function (sectionID) { return sections[sectionID]; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Adds the repair dot to the repair dot collection. The method fails if the repair dot object with the similar identifier already exists in the collection.\n\t\t\t * @param {RepairDot} dot - The repair dot object to be added.\n\t\t\t * @function Model3D#addRepairDot\n\t\t\t * @see RepairDots#add\n\t\t\t */\n\t\t\t'addRepairDot': {\n\t\t\t\tvalue: function (dot) { repairDotsCollection.add(dot); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Removes the repair dot from the repair dot collection.\n\t\t\t * @param {RepairDot} dot - The repair dot object to be removed.\n\t\t\t * @function Model3D#removeRepairDot\n\t\t\t * @see RepairDots#remove\n\t\t\t */\n\t\t\t'removeRepairDot': {\n\t\t\t\tvalue: function (dot) { repairDotsCollection.remove(dot.id); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Removes all items from the repair dot collection.\n\t\t\t * @param {RepairDot} dot - The repair dot object to be removed.\n\t\t\t * @function Model3D#removeRepairDot\n\t\t\t * @see RepairDots#remove\n\t\t\t */\n\t\t\t'removeAllRepairDots': {\n\t\t\t\tvalue: function () { repairDotsCollection.clear(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the contents of the repair dot collection as an array.\n\t\t\t * @returns {RepairDot[]}\n\t\t\t * @function Model3D#getRepairDotArray\n\t\t\t * @see RepairDots#toArray\n\t\t\t */\n\t\t\t'getRepairDotArray': {\n\t\t\t\tvalue: function () { return repairDotsCollection.toArray(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Finds the repair dot object by its identifier in the repair dot collection.\n\t\t\t * @param {string} dotID - The identifier of the repair dot.\n\t\t\t * @returns {RepairDot} The {@link RepairDot} object or <i>null</i>.\n\t\t\t * @function Model3D#getRepairDot\n\t\t\t * @see RepairDots#get\n\t\t\t */\n\t\t\t'getRepairDot': {\n\t\t\t\tvalue: function (dotID) { return repairDots[dotID]; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns an array of structure classes currently existing in the scene.\n\t\t\t * @returns {StructureClass[]} An array of {@link StructureClass} objects.\n\t\t\t * @see StructureClasses#toArray\n\t\t\t * @function Model3D#getStructureClassArray\n\t\t\t */\n\t\t\t'getStructureClassArray': {\n\t\t\t\tvalue: function () { return structureClassesCollection.toArray(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the repair dot object used by the framework for visual creation and editing of repair dots.\n\t\t\t * Should be called only in the editing mode.\n\t\t\t * @returns {RepairDot} The repair dot object.\n\t\t\t * @function Model3D#getCursorDot \n\t\t\t */\n\t\t\t'getCursorDot': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tconst peer = Module._stella_model_getNewbornDot();\n\t\t\t\t\tif (newbornDot) {\n\t\t\t\t\t\tif (newbornDot._peer == peer)\n\t\t\t\t\t\t\treturn newbornDot;\n\n\t\t\t\t\t\tdotDidDetachFromModel(newbornDot);\n\t\t\t\t\t}\n\t\t\t\t\tnewbornDot = new RepairDot();\n\t\t\t\t\tnewbornDot.id = UTF8ToString(Module._stella_item_getID(peer));\n\t\t\t\t\tnewbornDot._peer = peer;\n\t\t\t\t\tModule._stella_item_retain(peer);\n\t\t\t\t\treturn newbornDot;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Starts the dot editing mode.\n\t\t\t * @param {string} dotID - The identifier of the repair dot.\n\t\t\t * @param {string} dotType - The type of the dot being created. The supported values are \"dot\", \"line\" and \"area\".\n\t\t\t * @function Model3D#startPlotMode\n\t\t\t */\n\t\t\t'startPlotMode': {\n\t\t\t\tvalue: function (dotID, dotType) {\n\t\t\t\t\tisPlotMode = true;\n\t\t\t\t\tModule.ccall('stella_model_beginPlotMode', 'null', ['string', 'number'], ['' + dotID, dotType ? kDotTypeNames.indexOf(dotType) : 0]);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Tells the framework to exit the dot editing mode.\n\t\t\t * @function Model3D#endPlotMode\n\t\t\t */\n\t\t\t'endPlotMode': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tisPlotMode = false;\n\t\t\t\t\tModule._stella_model_endPlotMode();\n\t\t\t\t\tif (newbornDot)\n\t\t\t\t\t\tdotDidDetachFromModel(newbornDot);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Indicates whether the framework is in the dot editing mode.\n\t\t\t * @type boolean\n\t\t\t * @readonly\n\t\t\t * @name Model3D#isPlotMode\n\t\t\t */\n\t\t\t'isPlotMode': {\n\t\t\t\tget: function () { return isPlotMode; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Finishes adding points to a curve-styled repair dot (i.e. dot with the \"line\" or \"area\" types). \n\t\t\t * This function performs the interpolation of the line or area contour, closes the area if needed\n\t\t\t * and calculates the inner surface.\n\t\t\t * @function Model3D#completeAreaDot\n\t\t\t */\n\t\t\t'completeAreaDot': {\n\t\t\t\tvalue: function () { Module._stella_model_buildAreaDot(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Removes the last point from the repair dot contour (for area and line types only).\n\t\t\t * @function Model3D#undoAreaVertex\n\t\t\t */\n\t\t\t'undoAreaVertex': {\n\t\t\t\tvalue: function () { Module._stella_model_removeLastAreaPoint(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Checks if the repair dot can be plotted directly on an airplanes structure. \n\t\t\t * @param {RepairDot} repairDot - The repair dot object.\n\t\t\t * @returns {boolean} Returns a boolean value that indicates whether the repair dot can be plotted.\n\t\t\t * @function Model3D#checkPlot\n\t\t\t */\n\t\t\t'checkPlot': {\n\t\t\t\tvalue: function (repairDot) {\n\t\t\t\t\tconst pt = repairDot.location,\n\t\t\t\t\t\tlist = Module._stella_model_copyNearestElementList(pt.x, pt.y, pt.z, false);\n\t\t\t\t\tlet hasStructures = false;\n\t\t\t\t\tif (list) {\n\t\t\t\t\t\thasStructures = HEAP32[list >> 2] != 0;\n\t\t\t\t\t\tModule._free(list);\n\t\t\t\t\t}\n\t\t\t\t\treturn hasStructures;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Checks if a repair dot can be plotted directly on an airplane’s structure and return array of plotted structures. \n\t\t\t * @param {RepairDot} repairDot - The repair dot object.\n\t\t\t * @param {boolean} [skipTransparent=false] - Indicates whether the transparent structures are ignored.\n\t\t\t * @returns {string[]} An array of the structure element identifiers (e.g. \"STR_10L\") that are located close to the given repair dot. \n\t\t\t * An array is empty if the dot cannot be put on any structure (i.e. no structure element is found close to the given repair dot).\n\t\t\t * @see Model3D#DOT_TO_STRUCTURE_DISTANCE\n\t\t\t * @function Model3D#getNearestStructuresForDot\n\t\t\t */\n\t\t\t'getNearestStructuresForDot': {\n\t\t\t\tvalue: function (repairDot, skipTransparent) {\n\t\t\t\t\tconst pt = repairDot.location;\n\t\t\t\t\treturn getNearestStructures(pt.x, pt.y, pt.z, skipTransparent);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns an array of the predefined view names.\n\t\t\t * @returns {string[]} An array of strings.\n\t\t\t * @function Model3D#getPredefinedViewArray\n\t\t\t */\n\t\t\t'getPredefinedViewArray': {\n\t\t\t\tvalue: function () { return kPredefinedViews.slice(); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Sets the camera location depending on the argument type:\n\t\t\t * <ul>\n\t\t\t * <li>String – Specifies the predefined view by its name. The center of rotation is set to the visible part of the scene;</li>\n\t\t\t * <li>{@link RepairDot} – Moves the camera to the location associated with the repair dot. The rotation center is set to the center of the repair dot. In this case the {@link RepairDot#flash} method is invoked implicitly with the duration and frequency parameters set to the values of the {@link Model3D#DOT_FLASH_INTERVAL} and {@link Model3D#DOT_FLASH_FREQUENCY} properties respectively;</li>\n\t\t\t * <li>{@link Viewpoint} – Sets the location of camera and the center of rotation according to the following attribute values of the specified {@link Viewpoint} object: position, orientation and center. </li>\n\t\t\t * </ul>\n\t\t\t * @param {(String|RepairDot|Structure|Viewpoint)} object - The name of the predefined view, the repair dot, the structure element or the viewpoint object.\n\t\t\t * @param {boolean} [animated=true] - An optional boolean value that specifies whether the transition is to be animated.\n\t\t\t * @function Model3D#setView\n\t\t\t * @see Model3D#getPredefinedViewArray\n\t\t\t */\n\t\t\t'setView': {\n\t\t\t\tvalue: function (object, animated) {\n\t\t\t\t\tanimated = typeof (animated) === 'undefined' || !!animated;\n\t\t\t\t\tif (object.constructor === String) {\n\t\t\t\t\t\tconst i = kPredefinedViews.indexOf(object);\n\t\t\t\t\t\tif (i >= 0)\n\t\t\t\t\t\t\tModule._stella_model_fitSceneWithPredefinedView(i, animated);\n\t\t\t\t\t} else if (object.constructor === RepairDot) {\n\t\t\t\t\t\tif (object._peer) {\n\t\t\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\t\t\tdata = stackAlloc(48),\n\t\t\t\t\t\t\t\tvp = Module._stella_dot_getViewpoint(object._peer);\n\t\t\t\t\t\t\tHEAPU32[data >> 2] = 11;\n\t\t\t\t\t\t\tHEAPU8.set(HEAPU8.subarray(vp, vp + 28), data + 4);\n\t\t\t\t\t\t\tModule._stella_item_getCenter(object._peer, data + 36);\n\t\t\t\t\t\t\tModule._tiramisu_setCameraProperties(data, animated);\n\t\t\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\t\t\tif (lastFlashedDot)\n\t\t\t\t\t\t\t\tlastFlashedDot.stopFlash();\n\t\t\t\t\t\t\tobject.flash();\n\t\t\t\t\t\t\tlastFlashedDot = object;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (object.constructor === Structure) {\n\t\t\t\t\t\tModule._stella_model_fitItem(object._peer, animated);\n\t\t\t\t\t} else if (object.constructor === Viewpoint) {\n\t\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\t\tdata = stackAlloc(48);\n\t\t\t\t\t\tHEAPU32[data >> 2] = 11;\n\t\t\t\t\t\tfloat3_fromVec3f(data + 4, object.position);\n\t\t\t\t\t\tfloat4_fromRotation(data + 16, object.orientation)\n\t\t\t\t\t\tfloat3_fromVec3f(data + 36, object.center);\n\t\t\t\t\t\tModule._tiramisu_setCameraProperties(data, animated);\n\t\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Sets the center of rotation of the scene to the specified object of interest. Depending on the object argument type:\n\t\t\t * <ul>\n\t\t\t * <li>{@link Vec3f} or Array  – into an arbitrary point of 3D space which is specified by the Vec3f or Array object;</li>\n\t\t\t * <li>{@link Structure} – into the center of bounding box of the airplane structure element;</li>\n\t\t\t * <li>{@link RepairDot} – into the location of the repair dot;</li>\n\t\t\t * <li>{@link Viewpoint} – according to the value of the {@link Viewpoint#center} property.</li>\n\t\t\t * </ul>\n\t\t\t * The model is centered so that the new center will be placed in the middle of the 3D window. \n\t\t\t * @param {(Vec3f|RepairDot|Structure|Viewpoint|number[])} object - Object of interest.\n\t\t\t * @function Model3D#setRotationCenter\n\t\t\t */\n\t\t\t'setRotationCenter': {\n\t\t\t\tvalue: function (object) {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\tcenter = stackAlloc(12);\n\t\t\t\t\tlet valid = false,\n\t\t\t\t\t\tadjustCamera = false;\n\t\t\t\t\tif (object.constructor === Vec3f) {\n\t\t\t\t\t\tfloat3_fromObject(center, object);\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t} else if (object.constructor === RepairDot || object.constructor === Structure) {\n\t\t\t\t\t\tif (object._peer) {\n\t\t\t\t\t\t\tModule._stella_item_getCenter(object._peer, center);\n\t\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\t\tadjustCamera = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (object.constructor === Viewpoint) {\n\t\t\t\t\t\tfloat3_fromVec3f(center, object.center);\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t} else if (object.constructor === Array) {\n\t\t\t\t\t\tfloat3_fromArray(center, object);\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tModule._stella_model_setRotationCenter(valid ? center : 0, adjustCamera);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n \t\t\t/**\n\t\t\t * Sets the center of rotation of 3D scene to a visible place on the computer screen.\n\t\t\t * Zoom level is not changed.\n\t\t\t * @function Model3D#resetRotationCenter\n\t\t\t */\n\t\t\t'resetRotationCenter': {\n\t\t\t\tvalue: function (object) { Module._stella_model_setRotationCenter(0, false); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Rotates the model to an upright position as if the airplane were on the ground.\n\t\t\t * @param {boolean} [animated=true] - Specifies if the camera transition should be animated or instant.\n\t\t\t * @function Model3D#alignModel\n\t\t\t */\n\t\t\t'alignModel': {\n\t\t\t\tvalue: function (animated) { Module._stella_model_alignCamera(typeof (animated) === 'undefined' || animated); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Fits model in the view.\n\t\t\t * @param {boolean} [animated=true] - Specifies if the camera transition should be animated or instant.\n\t\t\t * @function Model3D#fitModel\n\t\t\t */\n\t\t\t'fitModel': {\n\t\t\t\tvalue: function (animated) { Module._stella_model_fitScene(typeof (animated) === 'undefined' || animated); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Fits structure part in the view. The center of rotation is set to the center of bounding box of the structure part.\n\t\t\t * @param {Structure} structure - Structure to be fit.\n\t\t\t * @param {boolean} [animated=true] - Specifies if the camera transition should be animated or instant.\n\t\t\t * @function Model3D#fitStructure\n\t\t\t */\n\t\t\t'fitStructure': {\n\t\t\t\tvalue: function (structure, animated) { Module._stella_model_fitItem(structure._peer, typeof (animated) === 'undefined' || animated); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Specifies whether the camera is orthographic.\n\t\t\t * @type boolean\n\t\t\t * @name Model3D#orthographicCamera\n\t\t\t */\n\t\t\t'orthographicCamera': {\n\t\t\t\tget: function () { return !!Module._tiramisu_isOrthographicCamera(); },\n\t\t\t\tset: function (isOrthographic) { Module._stella_model_setCameraType(isOrthographic ? 1 : 0); },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Registers a custom geometry for using with {@link RepairDot#shapeType}.\n\t\t\t * @param {number} typeID - The type ID of the geometry. The value of type ID should be equal to or greater than 16.\n\t\t\t * @param {string} syntax - The VRML syntax describing the geometry node.\n\t\t\t * @returns {boolean} Returns a boolean value that indicates the success of the method call.\n\t\t\t * @function Model3D#registerRepairDotShape\n\t\t\t */\n\t\t\t'registerRepairDotShape': {\n\t\t\t\tvalue: function (typeID, syntax) {\n\t\t\t\t\tconst sz = allocateUTF8(syntax),\n\t\t\t\t\t\tresult = Module._stella_model_registerDotShape(typeID, sz);\n\t\t\t\t\tModule._free(sz);\n\t\t\t\t\treturn !!result;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Registers a custom texture for using with {@link RepairDot#texture}.\n\t\t\t * @param {number} typeID - The type ID of the geometry. The value of type ID should be equal to or greater than 16.\n\t\t\t * @param {string} url - The URL of the file containing the texture image. Can be a data URL with base64 encoded texture image.\n\t\t\t * @param {number} scale - The scale of the texture.\n\t\t\t * @param {number} rotation - The rotation of the texture.\n\t\t\t * @returns {boolean} Returns a boolean value that indicates the success of the method call.\n\t\t\t * @function Model3D#registerRepairDotTexture\n\t\t\t */\n\t\t\t'registerRepairDotTexture': {\n\t\t\t\tvalue: function (typeID, url, scale, rotation) {\n\t\t\t\t\tconst sz = allocateUTF8(url),\n\t\t\t\t\t\tresult = Module._stella_model_registerRepairDotTexture(typeID, sz, scale, rotation);\n\t\t\t\t\tModule._free(sz);\n\t\t\t\t\treturn !!result;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Sets custom geometry for the cursor dot.\n\t\t\t * @param {string} syntax - The VRML syntax describing the shape node, or <i>null</i> to reset to default cursor geometry.\n\t\t\t * @returns {boolean} Returns a boolean value that indicates the success of the method call.\n\t\t\t * @function Model3D#setCursorDotShape\n\t\t\t */\n\t\t\t'setCursorDotShape': {\n\t\t\t\tvalue: function (syntax) {\n\t\t\t\t\tconst sz = syntax ? allocateUTF8(syntax) : 0,\n\t\t\t\t\t\tresult = Module._stella_model_setMarkerDotShape(sz);\n\t\t\t\t\tModule._free(sz);\n\t\t\t\t\treturn !!result;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t'_sectionDidFinishLoad': {\n\t\t\t\tvalue: function (peer, error) {\n\t\t\t\t\tlet section = null;\n\t\t\t\t\tfor (let i in sections) {\n\t\t\t\t\t\tconst s = sections[i];\n\t\t\t\t\t\tif (s._peer === peer) {\n\t\t\t\t\t\t\tsection = s;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (section) {\n\t\t\t\t\t\tconst success = error === 0;\n\t\t\t\t\t\tsection._state.loaded = success;\n\t\t\t\t\t\tif (section.zones && !error)\n\t\t\t\t\t\t\tsection.zones._didFinishLoad();\n\t\t\t\t\t\tif (this.on_section_loaded)\n\t\t\t\t\t\t\tthis.on_section_loaded(section);\n\t\t\t\t\t\tconst context = m_itemsBeingLoaded.get(section);\n\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\tm_itemsBeingLoaded.delete(section);\n\t\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\t\tcontext.resolve();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontext.reject(new Error(UTF8ToString(error)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_fragmentDidFinishLoad': {\n\t\t\t\tvalue: function (sectionPeer, fragmentIndex, elements, classNames, error) {\n\t\t\t\t\tlet fragment = null;\n\t\t\t\t\tfor (const i in sections) {\n\t\t\t\t\t\tconst section = sections[i];\n\t\t\t\t\t\tif (section._peer === sectionPeer) {\n\t\t\t\t\t\t\tfragment = section.fragments[fragmentIndex];\n\t\t\t\t\t\t\tif (fragment) {\n\t\t\t\t\t\t\t\tif (!fragment._peer && success)\n\t\t\t\t\t\t\t\t\tfragment._peer = Module._stella_section_getFragment(sectionPeer, fragmentIndex);\n\t\t\t\t\t\t\t\tfragment._state.loaded = !error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!fragment)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tif (!error) {\n\t\t\t\t\t\tconst structures = fragment._state.structures;\n\t\t\t\t\t\tfor (let p = elements >> 2; ; p += 2) {\n\t\t\t\t\t\t\tlet name = UTF8ToString(HEAPU32[p]);\n\t\t\t\t\t\t\tif (!name)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tstructures[name] = new Structure(name, fragment, HEAPU32[p + 1]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (let p = classNames >> 2; ; ++p) {\n\t\t\t\t\t\t\tlet name = UTF8ToString(HEAPU32[p]);\n\t\t\t\t\t\t\tif (!name)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tif (!structureClasses[name]) {\n\t\t\t\t\t\t\t\tconst structureClass = new StructureClass(name);\n\t\t\t\t\t\t\t\tstructureClasses[name] = structureClass;\n\t\t\t\t\t\t\t\tconst hidden = !Model3D.instance.ALL_CLASS_VISIBLE_ON_LOAD && (structureClass.isSkin || structureClass.isLayer);\n\t\t\t\t\t\t\t\tstructureClass.hidden = hidden;\n\t\t\t\t\t\t\t\tstructureClass.dotsHidden = hidden;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfragment._releasePeer();\n\t\t\t\t\t\tfragment._state.loaded = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.on_fragment_loaded)\n\t\t\t\t\t\tthis.on_fragment_loaded(fragment);\n\n\t\t\t\t\tconst context = m_itemsBeingLoaded.get(fragment);\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tm_itemsBeingLoaded.delete(fragment);\n\t\t\t\t\t\tif (!error)\n\t\t\t\t\t\t\tcontext.resolve();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcontext.reject(new Error(UTF8ToString(error)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_fragmentWillUnload': {\n\t\t\t\tvalue: function (sectionPeer, fragmentPeer, fragmentIndex) {\n\t\t\t\t\tconst fragment = fragmentWithIndex(sectionPeer, fragmentIndex);\n\t\t\t\t\tif (fragment) {\n\t\t\t\t\t\tObject.values(fragment._state.structures).forEach(structure => {\n\t\t\t\t\t\t\tModule._stella_item_release(structure._peer);\n\t\t\t\t\t\t\tstructure._peer = 0;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_fragmentDidUnload': {\n\t\t\t\tvalue: function (sectionPeer, fragmentPeer, fragmentIndex) {\n\t\t\t\t\tconst fragment = fragmentWithIndex(sectionPeer, fragmentIndex);\n\t\t\t\t\tif (fragment) {\n\t\t\t\t\t\tfragment._state.loaded = false;\n\t\t\t\t\t\tif (fragment._peer) {\n\t\t\t\t\t\t\tfragment._releasePeer();\n\t\t\t\t\t\t\tthis._rebuildStructures();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_rebuildStructures': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tconst items = getObjectList(Module._stella_model_copyStructureClassList);\n\t\t\t\t\tfor (let i in structureClasses)\n\t\t\t\t\t\tif (!items[i])\n\t\t\t\t\t\t\tdelete structureClasses[i];\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_dotWillChangeID': {\n\t\t\t\tvalue: function (dot, newID) {\n\t\t\t\t\tconst existingDot = repairDots[newID];\n\t\t\t\t\tif (existingDot && existingDot !== dot)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (repairDots[dot.id])\n\t\t\t\t\t\tdelete repairDots[dot.id];\n\t\t\t\t\trepairDots[newID] = dot;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_didClick': {\n\t\t\t\tvalue: function (peer, location, modifierKeys) {\n\t\t\t\t\tif (this.on_click_object)\n\t\t\t\t\t\tthis.on_click_object(float3_asVec3f(location), itemWithPeer(peer), 1, modifierKeys);\n\t\t\t\t}\n\t\t\t},\n\t\t\t'_didHover': {\n\t\t\t\tvalue: function (peer, location, topmostLocation) {\n\t\t\t\t\tif (this.on_over)\n\t\t\t\t\t\tthis.on_over(float3_asVec3f(location), itemWithPeer(peer), float3_asVec3f(topmostLocation));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Finds all the structure elements of the certain type at a distance not more than radius from the center of a given object location. \n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t\t * @param {number} radius - The maximum distance to search for a structure element.\n\t\t\t * @param {?string[]} structureClasses - The array of strings with name of structure classes.\n\t\t\t * @returns {?object[]} An array of the objects &#123; <i>name</i>: String, <i>distance</i>: number, <i>translation</i>: {@link Vec3f} &#125;. <br>Where, the <i>translation</i> property is a vector from the given location to the nearest point of the structure element with the name that is contained in the <i>name</i> property.\n\t\t\t * @see Section#getStructuresInSphere\n\t\t\t * @function Model3D#getStructuresInSphere\n\t\t\t */\n\t\t\t'getStructuresInSphere': {\n\t\t\t\tvalue: function (sectionID, location, radius, structureClasses) {\n\t\t\t\t\tconst section = sections[sectionID];\n\t\t\t\t\treturn section ? section.getStructuresInSphere(location, radius, structureClasses) : null;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Finds all the structure elements of the certain type at a distance not more than maxDistance from the center of a given object location across the fuselage. \n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t\t * @param {number} maxDistance - The maximum distance to search for a structure element.\n\t\t\t * @param {?string[]} structureClasses - The array of strings with name of structure classes.\n\t\t\t * @returns {?object[]} An array of the objects &#123; <i>name</i>: String, <i>distance</i>: number, <i>translation</i>: {@link Vec3f} &#125;. <br>Where, the <i>translation</i> property is a vector from the given location to the nearest point of the structure element with the name that is contained in the <i>name</i> property.\n\t\t\t * @see Section#getStructuresAcrossFuselage\n\t\t\t * @function Model3D#getStructuresAcrossFuselage\n\t\t\t */\n\t\t\t'getStructuresAcrossFuselage': {\n\t\t\t\tvalue: function (sectionID, location, maxDistance, structureClasses) {\n\t\t\t\t\tconst section = sections[sectionID];\n\t\t\t\t\treturn section ? section.getStructuresAcrossFuselage(location, maxDistance, structureClasses) : null;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Finds the distance to the structure element. \n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @param {string} structureName - The name of structure element.\n\t\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t\t * @param {number} maxDistance - The maximum distance to search for a structure element.\n\t\t\t * @returns {number} The distance to structure in meters.\n\t\t\t * @see Structure#getDistanceToPoint\n\t\t\t * @function Model3D#getDistanceToStructure\n\t\t\t */\n\t\t\t'getDistanceToStructure': {\n\t\t\t\tvalue: function (sectionID, structureName, location, maxDistance) {\n\t\t\t\t\tconst s = structures[structureName];\n\t\t\t\t\tif (s && s.sectionID == sectionID) {\n\t\t\t\t\t\tconst d = s.getDistanceToPoint(location);\n\t\t\t\t\t\treturn typeof (maxDistance) === 'undefined' ? d : Math.min(d, maxDistance);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * The global rotation of the VRML model.\n\t\t\t * Default value is Rotation(-0.57735, 0.57735, 0.577352, 2.0944), which is equivalent to a serial rotations by -90 degrees along the axis X and by 90 degrees along the axis Y.\n\t\t\t * <p><i><b>NOTE:</b> API requires that the VRML model should be oriented as follows: upwards along the axis Y, forward on the axis Z.</i>\n\t\t\t * @type Rotation\n\t\t\t * @name Model3D#MODEL_ROTATION\n\t\t\t */\n\t\t\t'MODEL_ROTATION': {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn float4_asRotation(Module._stella_model_getModelRotation());\n\t\t\t\t},\n\t\t\t\tset: function (value) {\n\t\t\t\t\tif (Array.isArray(value))\n\t\t\t\t\t\tModule._stella_model_setModelRotation(value[0], value[1], value[2], value[3]);\n\t\t\t\t\telse\n\t\t\t\t\t\tModule._stella_model_setModelRotation(value.x, value.y, value.z, value.angle);\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Picker options that provide more fine grained control on the raycast by including into \n\t\t\t * or excluding from the raycast a particular types of elements.\n\t\t\t * @prop {number} Model3D.SKIP_REPAIR_DOTS=1 - Skip repair dots when performing raycast.\n\t\t\t * @prop {number} Model3D.SKIP_STRUCTURE_ELEMENTS=2 - Skip structure elements when performing raycast.\n\t\t\t * @prop {number} Model3D.SKIP_SKIN_ELEMENTS=4 - Skip skin elements when performing raycast.\n\t\t\t * @prop {number} Model3D.SKIP_LAYER_ELEMENTS=8 - Skip layer elements when performing raycast.\n\t\t\t * @prop {number} Model3D.SKIP_FASTENERS=0x10000 - Skip fastener elements when performing raycast.\n\t\t\t * @prop {number} Model3D.INCLUDE_HIDDEN_STRUCTURE_ELEMENTS=0x200 - Include hidden structure elements when performing raycast.\n\t\t\t * @prop {number} Model3D.INCLUDE_HIDDEN_SKIN_ELEMENTS=0x400 - Include hidden skin elements when performing raycast.\n\t\t\t * @prop {number} Model3D.INCLUDE_HIDDEN_LAYER_ELEMENTS=0x800 - Include hidden layer elements when performing raycast.\n\t\t\t * @typedef {number} PickerOptions\n\t\t\t * @see {@link Model3D#pickItem}\n\t\t\t * @see {@link Model3D#pickItems}\n\t\t\t * @see {@link Model3D#pickItemWithRay}\n\t\t\t * @see {@link Model3D#pickItemsWithRay}\n\t\t\t * @see {@link Model3D#getVisibleItems}\n\t\t\t */\n\t\t\t'SKIP_REPAIR_DOTS': { value: 1, enumerable: true },\n\t\t\t'SKIP_STRUCTURE_ELEMENTS': { value: 2, enumerable: true },\n\t\t\t'SKIP_SKIN_ELEMENTS': { value: 4, enumerable: true },\n\t\t\t'SKIP_LAYER_ELEMENTS': { value: 8, enumerable: true },\n\t\t\t'SKIP_FASTENERS': { value: 0x10000, enumerable: true },\n\t\t\t'INCLUDE_HIDDEN_STRUCTURE_ELEMENTS': { value: 0x200, enumerable: true },\n\t\t\t'INCLUDE_HIDDEN_SKIN_ELEMENTS': { value: 0x400, enumerable: true },\n\t\t\t'INCLUDE_HIDDEN_LAYER_ELEMENTS': { value: 0x800, enumerable: true },\n\n\t\t\t/**\n\t\t\t * Picker options to be used when performing raycast in plot mode, \n\t\t\t * a combination of flags from {@link PickerOptions}.\n\t\t\t * @type number\n\t\t\t * @name Model3D#pickerOptionsInPlotMode\n\t\t\t */\n\t\t\t'pickerOptionsInPlotMode': {\n\t\t\t\tvalue: 9, // SKIP_LAYER_ELEMENTS | SKIP_REPAIR_DOTS\n\t\t\t\twritable: true,\n\t\t\t\tenumerable: true\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Raycasts from the specified location in 3D view and returns information about picked point and object.\n\t\t\t * @param {number} x - The X coordinate relative to the &lt;canvas&gt; element.\n\t\t\t * @param {number} y - The Y coordinate relative to the &lt;canvas&gt; element.\n\t\t\t * @param {number} [options] - Picker options, a combination of flags from {@link PickerOptions}.\n\t\t\t * @param {number} [transparencyThreshold] - Transparency threshold used by picker.\n\t\t\t * @returns {?Object} An object &#123; <i>item</i>: Object, <i>location</i>: {@link Vec3f}, <i>normal</i>: {@link Vec3f}, <i>distance</i>: number &#125;. <br>Where, the <i>location</i> property is a point on the surface of the picked geometry, the <i>normal</i> property is a vector of the normal to the surface of the picked geometry. If no object were picked, the returned value is null.\n\t\t\t * @function Model3D#pickItem\n\t\t\t */\n\t\t\t'pickItem': {\n\t\t\t\tvalue: function (x, y, options, transparencyThreshold) {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\thit = stackAlloc(32);\n\t\t\t\t\tlet result = null;\n\t\t\t\t\tif (Module._stella_model_pickItem(x, y, options | 0, typeof (transparencyThreshold) === 'undefined' ? -1 : transparencyThreshold, hit))\n\t\t\t\t\t\tresult = pickerHit_asObject(hit);\n\t\t\t\t\tstackRestore(sp);\t\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Raycasts using the specified ray and returns information about picked point and object.\n\t\t\t * @param {Object} ray - The ray, an object &#123; <i>origin</i>: {@link Vec3f} or an array of three numbers [x, y, z], <i>direction</i>: {@link Vec3f} or an array of three numbers [x, y, z] &#125;\n\t\t\t * @param {number} [options] - Picker options, a combination of flags from {@link PickerOptions}.\n\t\t\t * @param {number} [transparencyThreshold] - Transparency threshold used by picker.\n\t\t\t * @returns {?Object} An object &#123; <i>item</i>: Object, <i>location</i>: {@link Vec3f}, <i>normal</i>: {@link Vec3f}, <i>distance</i>: number &#125;. <br>Where, the <i>location</i> property is a point on the surface of the picked geometry, the <i>normal</i> property is a vector of the normal to the surface of the picked geometry. If no object were picked, the returned value is null.\n\t\t\t * @function Model3D#pickItemWithRay\n\t\t\t */\n\t\t\t'pickItemWithRay': {\n\t\t\t\tvalue: function (ray, options, transparencyThreshold) {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\trayData = stackAlloc(24),\n\t\t\t\t\t\tresult = stackAlloc(32);\n\t\t\t\t\tfloat3_fromObject(rayData, ray.origin);\n\t\t\t\t\tfloat3_fromObject(rayData + 12, ray.direction);\n\t\t\t\t\tlet hit = null;\n\t\t\t\t\tif (Module._stella_model_pickItemWithRay(rayData, options | 0, typeof (transparencyThreshold) === 'undefined' ? -1 : transparencyThreshold, result))\n\t\t\t\t\t\thit = pickerHit_asObject(result);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\treturn hit;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Raycasts from the specified location in 3D view and returns information about all picked objects and corresponding picked points.\n\t\t\t * @param {number} x - The X coordinate relative to the &lt;canvas&gt; element.\n\t\t\t * @param {number} y - The Y coordinate relative to the &lt;canvas&gt; element.\n\t\t\t * @param {number} [options] - Picker options, a combination of flags from {@link PickerOptions}.\n\t\t\t * @param {number} [transparencyThreshold] - Transparency threshold used by picker.\n\t\t\t * @returns {?object[]} An array of objects &#123; <i>item</i>: Object, <i>location</i>: {@link Vec3f}, <i>normal</i>: {@link Vec3f}, <i>distance</i>: number &#125;. <br>Where, the <i>location</i> property is a point on the surface of the picked geometry, the <i>normal</i> property is a vector of the normal to the surface of the picked geometry. If no object were picked, the returned value is null.\n\t\t\t * @function Model3D#pickItems\n\t\t\t */\n\t\t\t'pickItems': {\n\t\t\t\tvalue: function (x, y, options, transparencyThreshold) {\n\t\t\t\t\tconst result = Module._stella_model_pickItems(x, y, options | 0, typeof (transparencyThreshold) === 'undefined' ? -1 : transparencyThreshold);\n\t\t\t\t\tlet hits = null;\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\thits = pickerHits_asArray(result);\n\t\t\t\t\t\tModule._free(result);\n\t\t\t\t\t}\n\t\t\t\t\treturn hits;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Raycasts using the specified ray and returns information about all picked objects and corresponding picked points.\n\t\t\t * @param {Object} ray - The ray, an object &#123; <i>origin</i>: {@link Vec3f} or an array of three numbers [x, y, z], <i>direction</i>: {@link Vec3f} or an array of three numbers [x, y, z] &#125;\n\t\t\t * @param {number} [options] - Picker options, a combination of flags from {@link PickerOptions}.\n\t\t\t * @param {number} [transparencyThreshold] - Transparency threshold used by picker.\n\t\t\t * @returns {?Object[]} An array of objects &#123; <i>item</i>: Object, <i>location</i>: {@link Vec3f}, <i>normal</i>: {@link Vec3f}, <i>distance</i>: number &#125;. <br>Where, the <i>location</i> property is a point on the surface of the picked geometry, the <i>normal</i> property is a vector of the normal to the surface of the picked geometry. If no object were picked, the returned value is null.\n\t\t\t * @function Model3D#pickItemsWithRay\n\t\t\t */\n\t\t\t'pickItemsWithRay': {\n\t\t\t\tvalue: function (ray, options, transparencyThreshold) {\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\trayData = stackAlloc(24);\n\t\t\t\t\tfloat3_fromObject(rayData, ray.origin);\n\t\t\t\t\tfloat3_fromObject(rayData + 12, ray.direction);\n\t\t\t\t\tconst result = Module._stella_model_pickItemsWithRay(rayData, options | 0, typeof (transparencyThreshold) === 'undefined' ? -1 : transparencyThreshold);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\tlet hits = null;\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\thits = pickerHits_asArray(result);\n\t\t\t\t\t\tModule._free(result);\n\t\t\t\t\t}\n\t\t\t\t\treturn hits;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the items which are currently visible.\n\t\t\t * @param {number} [options] - Picker options, a combination of flags from {@link PickerOptions}.\n\t\t\t * @param {number} [transparencyThreshold] - Transparency threshold.\n\t\t\t * @returns {Map} A map object, where keys are items, and values are the number of pixels of the corresponding item visible in the 3D view. If no items are visible, the returned value is null.\n\t\t\t * @function Model3D#getVisibleItems\n\t\t\t */\n\t\t\t'getVisibleItems': {\n\t\t\t\tvalue: function (options, transparencyThreshold) {\n\t\t\t\t\tconst query = Module._stella_model_getVisibleItems(options | 0, typeof (transparencyThreshold) === 'undefined' ? -1 : transparencyThreshold);\n\t\t\t\t\tlet results = null;\n\t\t\t\t\tif (query) {\n\t\t\t\t\t\tresults = new Map();\n\t\t\t\t\t\tfor (let p = query >> 2; HEAPU32[p]; p += 2)\n\t\t\t\t\t\t\tresults.set(itemWithPeer(HEAPU32[p]), HEAPU32[p + 1]);\n\t\t\t\t\t\tModule._free(query);\n\t\t\t\t\t}\n\t\t\t\t\treturn results;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the layers which are found at the given location in the 3D space.\n\t\t\t * @param {Vec3f} location - The {@link Vec3f} object.\n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @returns {Object.<string, object[]>} Returns an object with properties corresponding to the layers.\n\t\t\t * The layers are specified using the {@link Model3D#LAYER_STRUCTURE_LIST} property.\n\t\t\t * The value of each property of the returned object is an array of objects \n\t\t\t * &#123; <i>item:</i> {@link Structure}, <i>description:</i> string &#125; which are results\n\t\t\t * found at the location in each particular layer. An array may contain multiple \n\t\t\t * elements if the layer contains overlapping values at the given location.\n\t\t\t * @function Model3D#getLayersAtLocation\n\t\t\t * @see Model3D#getLayersForRepairDot\n\t\t\t */\n\t\t\t'getLayersAtLocation': {\n\t\t\t\tvalue: function (location, sectionID) {\n\t\t\t\t\tconst section = sectionsCollection.get(sectionID);\n\t\t\t\t\tif (!section)\n\t\t\t\t\t\treturn {};\n\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\tlocationVec = stackAlloc(12),\n\t\t\t\t\t\toffsetVec = stackAlloc(12),\n\t\t\t\t\t\tmidpointCount = section.midpoints.length,\n\t\t\t\t\t\tmidpoints = midpointCount ? stackAlloc(midpointCount * 12) : 0;\n\n\t\t\t\t\tfloat3_fromObject(locationVec, location);\n\t\t\t\t\tfloat3_fromObject(offsetVec, section.translation);\n\t\t\t\t\tsection.midpoints.forEach((mp, i) => float3_fromObject(midpoints + i * 12, mp));\n\n\t\t\t\t\tconst collection = Module._stella_model_getLayersAtLocation(locationVec, offsetVec, midpoints, midpointCount);\n\t\t\t\t\tconst layers = layersWithElementCollection(collection);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\tModule._free(collection);\n\t\t\t\t\treturn layers;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns layer information for the repair dot.\n\t\t\t * <p>The behavior of this method varies on the type of repair dot:<ul>\n\t\t\t * <li>For a simple dot, returns the information for the layers at the dot location.\n\t\t\t * <li>For a repair line, returns the information for the layers found along the polyline path.\n\t\t\t * <li>For a repair area, returns the information for the layers for the whole area.</ul>\n\t\t\t * @param {RepairDot} dot - The {@link RepairDot} object.\n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @returns {Object.<string, object[]>} Returns an object with properties corresponding to the layers.\n\t\t\t * Layers are specified using the {@link Model3D#LAYER_STRUCTURE_LIST} property.\n\t\t\t * <p>The value of each property of the returned object is an array of objects \n\t\t\t * &#123; <i>item:</i> {@link Structure}, <i>description:</i> string[, <i>weight:</i> number] &#125;\n\t\t\t * which are results found at the repair dot location or along the polyline path or inside the repair area\n\t\t\t * in each particular layer. An array may contain multiple elements if the repair line or area spans\n\t\t\t * multiple values in the layer.\n\t\t\t * <p>The elements of the array may have the <i>weight</i> property:\n\t\t\t * <ul><li>For a repair line, it is a ratio of the length of the part of the polyline\n\t\t\t * that belongs to the layer to the total length of the polyline.\n\t\t\t * <li>For a repair area, it is the ratio of the area of the dot surface part that \n\t\t\t * intersects the layer surface to the total area of the dot surface.</ul>\n\t\t\t * @function Model3D#getLayersForRepairDot\n\t\t\t * @see Model3D#getLayersAtLocation\n\t\t\t */\n\t\t\t'getLayersForRepairDot': {\n\t\t\t\tvalue: function (dot, sectionID) {\n\t\t\t\t\tconst section = sectionsCollection.get(sectionID);\n\t\t\t\t\tif (!section || !dot._peer)\n\t\t\t\t\t\treturn {};\n\n\t\t\t\t\tconst sp = stackSave(),\n\t\t\t\t\t\toffsetVec = stackAlloc(12),\n\t\t\t\t\t\tmidpointCount = section.midpoints.length,\n\t\t\t\t\t\tmidpoints = midpointCount ? stackAlloc(midpointCount * 12) : 0;\n\n\t\t\t\t\tfloat3_fromObject(offsetVec, section.translation);\n\t\t\t\t\tsection.midpoints.forEach((mp, i) => float3_fromObject(midpoints + i * 12, mp));\n\n\t\t\t\t\tconst collection = Module._stella_model_getLayersForRepairDot(dot._peer, offsetVec, midpoints, midpointCount);\n\t\t\t\t\tconst layers = layersWithElementCollection(collection);\n\t\t\t\t\tstackRestore(sp);\n\t\t\t\t\tModule._free(collection);\n\t\t\t\t\treturn layers;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Finds the nearest to the given location fastener.\n\t\t\t * @param {Vec3f} location - The {@link SFVec3f} object.\n\t\t\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t\t\t * @returns {?Fastener} A fastener object, or <i>null</i> if no fastener within {@link Model3D#fastenerSearchRadius} is found.\n\t\t\t * <p>The <i>metadata</i> property of the returned object has multiple JavaScript properties;\n\t\t\t * the name and value of each property correspond to the respective properties of the fastener.\n\t\t\t * Use the JavaScript <b>for (..in)</b> statement to traverse through the properties.\n\t\t\t * @function Model3D#getFastenerAtLocation\n\t\t\t * @see Model3D#getFastenersForRepairDot\n\t\t\t */\n\t\t\t'getFastenerAtLocation': {\n\t\t\t\tvalue: function (location, sectionID) {\n\t\t\t\t\tconst section = sectionsCollection.get(sectionID);\n\t\t\t\t\treturn section ? section.getFastenerAtLocation(location) : null;\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Returns the fasteners corresponding to the repair dot.\n\t\t\t * <p>The behavior of this method varies on the type of repair dot:<ul>\n\t\t\t * <li>For a simple dot, finds the nearest to the dot fastener. When looking up the nearest fastener,\n\t\t\t * only fasteners within the {@link Model3D#fastenerSearchRadius} radius are taken into account.\n\t\t\t * <li>For a repair line, returns all fasteners along the polyline. When looking up the fasteners,\n\t\t\t * only fasteners within {@link Model3D#fastenerSearchRadius} are taken into account.\n\t\t\t * <li>For a repair area, Returns all fasteners inside the area. If no fasteners are inside the area,\n\t\t\t * returns the nearest fastener if the distance is less than {@link Model3D#areaFastenerSearchRadius}.</ul>\n\t\t\t * @param {RepairDot} dot - The {@link RepairDot} object.\n\t\t\t * @param {string} sectiFasonID - The identifier of the airplane section.\n\t\t\t * @returns {Fastener[]} An array of found fasteners.\n\t\t\t * <p>The <i>metadata</i> property of the returned objects has multiple JavaScript properties;\n\t\t\t * the name and value of each property correspond to the respective properties of the fastener.\n\t\t\t * Use the JavaScript <b>for (..in)</b> statement to traverse through the properties.\n\t\t\t * @function Model3D#getFastenersForRepairDot\n\t\t\t * @see Model3D#getFastenerAtLocation\n\t\t\t */\n\t\t\t'getFastenersForRepairDot': {\n\t\t\t\tvalue: function (dot, sectionID) {\n\t\t\t\t\tconst section = sectionsCollection.get(sectionID);\n\t\t\t\t\treturn section ? section.getFastenersForRepairDot(dot) : [];\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * This field specifies the color of the semi-transparent sphere used to highlight selected fasteners,\n\t\t\t * as an array of three floating-point numbers (R, G, B) ranging from 0 to 1. The default value is red.\n\t\t\t * This parameter can be changed at run time.\n\t\t\t * @name Model3D#fastenerHighlightColor\n\t\t\t * @type Array\n\t\t\t * @default [1, 0, 0]\n\t\t\t * @see Model3D#highlightFasteners\n\t\t\t */\n\t\t\t'fastenerHighlightColor': {\n\t\t\t\tget: function () {return fastenerHighlightColor;},\n\t\t\t\tset: function (value) {\n\t\t\t\t\tfastenerHighlightColor[0] = value[0];\n\t\t\t\t\tfastenerHighlightColor[1] = value[1];\n\t\t\t\t\tfastenerHighlightColor[2] = value[2];\n\t\t\t\t\tif (fastenerHighlightShapeNode) {\n\t\t\t\t\t\tModule._tiramisu_restoreObjectProperty(fastenerHighlightShapeNode, /*PROPERTY_EMISSIVE_COLOR*/ 1, false);\n\t\t\t\t\t\tModule._tiramisu_setObjectPropertyf(fastenerHighlightShapeNode, 1, false, value[0], value[1], value[2]);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Highlights the fasteners or removes the highlight.\n\t\t\t * @param {Fastener[]} fasteners An array contained fastener objects. Pass an empty array to remove the highlight.\n\t\t\t * @function Model3D#highlightFasteners\n\t\t\t * @see Model3D#getFastenerAtLocation\n\t\t\t * @see Model3D#getFastenersForRepairDot\n\t\t\t */\n\t\t\t'highlightFasteners': {\n\t\t\t\tvalue: function (fasteners) {\n\t\t\t\t\tif (!fasteners || fasteners.length == 0) {\n\t\t\t\t\t\tthis.unhighlightFasteners();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst unusedFasteners = new Map(fastenerHighlights);\n\t\t\t\t\tfasteners.forEach(fastener => {\n\t\t\t\t\t\tif (fastenerHighlights.has(fastener))\n\t\t\t\t\t\t\tunusedFasteners.delete(fastener);\n\t\t\t\t\t});\n\t\t\t\t\tunusedFasteners.forEach((node, fastener) => {\n\t\t\t\t\t\tfastenerHighlights.delete(fastener);\n\t\t\t\t\t\tfastenerHighlightPool.push(node);\n\t\t\t\t\t\tModule._tiramisu_restoreObjectProperty(node, /*PROPERTY_TRANSLATION*/ 4, false);\n\t\t\t\t\t\tModule._tiramisu_setObjectVisibility(node, false);\n\t\t\t\t\t});\n\t\t\t\t\tconst offsets = {};\n\t\t\t\t\tfasteners.forEach(fastener => {\n\t\t\t\t\t\tif (!fastenerHighlights.has(fastener)) {\n\t\t\t\t\t\t\tlet node;\n\t\t\t\t\t\t\tif (!fastenerHighlightPool.length) {\n\t\t\t\t\t\t\t\tif (!fastenerHighlightGroup) {\n\t\t\t\t\t\t\t\t\tfastenerHighlightGroup = createNode('Group{}');\n\t\t\t\t\t\t\t\t\tModule._tiramisu_addObject(fastenerHighlightGroup, 0);\n\t\t\t\t\t\t\t\t\tModule._tiramisu_setObjectIgnorableByPicker(fastenerHighlightGroup, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!fastenerHighlightShapeNode)\n\t\t\t\t\t\t\t\t\tfastenerHighlightShapeNode = createNode('Shape {appearance Appearance {material Material {emissiveColor ' +\n\t\t\t\t\t\t\t\t\t\tfastenerHighlightColor.join(' ') + ' diffuseColor 0 0 0 transparency .2}} geometry Sphere {radius ' +\n\t\t\t\t\t\t\t\t\t\tthis.fastenerHighlightRadius + '}}');\n\t\t\t\t\t\t\t\tnode = createNode('Transform {}');\n\t\t\t\t\t\t\t\tModule._tiramisu_addObject(fastenerHighlightShapeNode, node);\n\t\t\t\t\t\t\t\tModule._tiramisu_addObject(node, fastenerHighlightGroup);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = fastenerHighlightPool.pop();\n\t\t\t\t\t\t\t\tModule._tiramisu_setObjectVisibility(node, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfastenerHighlights.set(fastener, node);\n\t\t\t\t\t\t\tlet offset = offsets[fastener.sectionID];\n\t\t\t\t\t\t\tif (!offset) {\n\t\t\t\t\t\t\t\tconst section = sectionsCollection.get(fastener.sectionID);\n\t\t\t\t\t\t\t\toffset = section ? section.translation : new Vec3f(0, 0, 0);\n\t\t\t\t\t\t\t\toffsets[fastener.sectionID] = offset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst location = fastener.location; \n\t\t\t\t\t\t\tModule._tiramisu_setObjectPropertyf(node, /*PROPERTY_TRANSLATION*/ 4, false, location.x + offset.x, location.y + offset.y, location.z + offset.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Removes the highlight of the fasteners which were previously highlighted by {@link Model3D#highlightFasteners}.\n\t\t\t * @function Model3D#unhighlightFasteners\n\t\t\t */\n\t\t\t'unhighlightFasteners': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tfastenerHighlights.forEach((node, fastener) => {\n\t\t\t\t\t\tfastenerHighlightPool.push(node);\n\t\t\t\t\t\tModule._tiramisu_restoreObjectProperty(node, /*PROPERTY_TRANSLATION*/ 4, false);\n\t\t\t\t\t\tModule._tiramisu_setObjectVisibility(node, false);\n\t\t\t\t\t});\n\t\t\t\t\tfastenerHighlights.clear();\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t}\n\t\t});\n\t}\n\n\tObject.defineProperties(Element.prototype, {\n\t\t'selectSingleNode': {\n\t\t\tvalue: function (xpath) {\n\t\t\t\treturn this.ownerDocument.evaluate(xpath, this, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n\t\t\t}\n\t\t},\n\t\t'selectNodes': {\n\t\t\tvalue: function (xpath) {\n\t\t\t\tconst i = this.ownerDocument.evaluate(xpath, this, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null),\n\t\t\t\t\tnodes = [];\n\t\t\t\tlet n;\n\t\t\t\twhile (n = i.iterateNext())\n\t\t\t\t\tnodes.push(n);\n\t\t\t\treturn nodes;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(XMLDocument.prototype, {\n\t\t'selectSingleNode': {\n\t\t\tvalue: function (xpath) {\n\t\t\t\treturn this.evaluate(xpath, this, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n\t\t\t}\n\t\t},\n\t\t'selectNodes': {\n\t\t\tvalue: function (xpath) {\n\t\t\t\tconst i = this.evaluate(xpath, this, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null),\n\t\t\t\t\tnodes = [];\n\t\t\t\tlet n;\n\t\t\t\twhile (n = i.iterateNext())\n\t\t\t\t\tnodes.push(n);\n\t\t\t\treturn nodes;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Constructs a new AirplaneBoundBox object.\n\t * @classdesc Represents a bounding box of an airplane section in the Fuselage coordinates.<br>\n\t * @class\n\t * @name AirplaneBoundBox\n\t */\n\tfunction AirplaneBoundBox() {\n\t\t/**\n\t\t * The center of the bounding box.\n\t\t * @type AirplaneFuselageLocation\n\t\t * @name AirplaneBoundBox#center\n\t\t */\n\t\tthis.center = new AirplaneFuselageLocation(0, 0, 0);\n\n\t\t/**\n\t\t * The size of the bounding box.\n\t\t * @type AirplaneFuselageLocation\n\t\t * @name AirplaneBoundBox#size\n\t\t */\n\t\tthis.size = new AirplaneFuselageLocation(0, 0, 0);\n\t}\n\n\t/**\n\t * Constructs a new AirplaneBoundBox object from the given XML node.\n\t * @param {XMLDOMNode} xmlNode - The XML node which represents the bounding box of the airplane section.\n\t * @returns {AirplaneBoundBox} The AirplaneBoundBox object.\n\t * @function AirplaneBoundBox#fromXMLNode\n\t */\n\tAirplaneBoundBox.prototype.fromXMLNode = function (xmlNode) {\n\t\tthis.center.fromXMLNode(xmlNode.selectSingleNode('center'));\n\t\tthis.center.BBL = -this.center.BBL; /* metadata uses reverse BBL coordinate */\n\t\tthis.size.fromXMLNode(xmlNode.selectSingleNode('size'));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if the location is inside of the bounding box.\n\t * @param {AirplaneFuselageLocation} airplaneFuselageLocation - The fuselage location.\n\t * @returns {boolean} Returns a boolean value that indicates whether the location is inside of the bounding box.\n\t * @function AirplaneBoundBox#isInside\n\t */\n\tAirplaneBoundBox.prototype.isInside = function (airplaneFuselageLocation) {\n\t\treturn Math.abs(airplaneFuselageLocation.BSTA - this.center.BSTA) <= this.size.BSTA / 2 &&\n\t\t\tMath.abs(airplaneFuselageLocation.BBL - this.center.BBL) <= this.size.BBL / 2 &&\n\t\t\tMath.abs(airplaneFuselageLocation.BWL - this.center.BWL) <= this.size.BWL / 2;\n\t}\n\n\t/**\n\t * Check if the bounding box is empty.\n\t * @returns {boolean} Returns a boolean value that indicates whether the bounding box is empty.\n\t * @function AirplaneBoundBox#isEmpty\n\t */\n\tAirplaneBoundBox.prototype.isEmpty = function () {\n\t\treturn this.size.BSTA == 0 && this.size.BBL == 0 && this.size.BWL == 0;\n\t}\n\n\t/**\n\t * Returns a string representation of an object.\n\t * @returns {string} A string of the following form: \"CENTER( BSTA=..., BBL=..., BWL=... ) SIZE( BSTA=..., BBL=..., BWL=... )\"\n\t * @function AirplaneBoundBox#toString\n\t */\n\tAirplaneBoundBox.prototype.toString = function () {\n\t\treturn \"CENTER(\" + this.center + \") SIZE(\" + this.size + \")\";\n\t}\n\n\t/**\n\t * Constructs a new AirplaneFuselageLocation object.\n\t * @classdesc Represents a location in the Fuselage coordinates.<br>\n\t * @param {number} bsta - Body Station coordinate.\n\t * @param {number} bwl - Body Water Line coordinate.\n\t * @param {number} bbl - Body Buttock Line coordinate.\n\t * @class\n\t * @name AirplaneFuselageLocation\n\t */\n\tfunction AirplaneFuselageLocation(bsta, bwl, bbl) {\n\t\t/**\n\t\t * Body Station coordinate.\n\t\t * @type number\n\t\t * @name AirplaneFuselageLocation#BSTA\n\t\t */\n\t\tthis.BSTA = bsta;\n\t\t/**\n\t\t * Body Water Line coordinate.\n\t\t * @type number\n\t\t * @name AirplaneFuselageLocation#BWL\n\t\t */\n\t\tthis.BWL = bwl;\n\t\t/**\n\t\t * Body Buttock Line coordinate. Negative value is left side. Positive value is right side.\n\t\t * @type number\n\t\t * @name AirplaneFuselageLocation#BBL\n\t\t */\n\t\tthis.BBL = bbl;\n\t}\n\n\t/**\n\t * Constructs a new AirplaneFuselageLocation object from XML node.\n\t * @param {XMLDOMNode} xmlNode - The XML node which represents airplane fuselage coordinate. \n\t * @param {Object.<string, string>} [attributeAssoc] - An associative array contains pairs of the XML node attribute name and the AirplaneFuselageLocation field name.<br>The default value is {'BSTA' : 'bsta', 'BWL' : 'bwl', 'BBL' : 'bbl'}.\n\t * @returns {AirplaneBoundBox} The AirplaneBoundBox object.\n\t * @function AirplaneFuselageLocation#fromXMLNode\n\t */\n\tAirplaneFuselageLocation.prototype.fromXMLNode = function (xmlNode, attributeAssoc) {\n\t\tconst attributes = (typeof (attributeAssoc) == 'undefined') ? {'BSTA' : 'bsta', 'BWL' : 'bwl', 'BBL' : 'bbl'} : attributeAssoc;\n\t\ttry {\n\t\t\tfor (let key in attributes)\n\t\t\t\tthis[key] = parseFloat(xmlNode.getAttribute(attributes[key]));\n\t\t} catch (exception) {}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of the Buttock Line side.\n\t * @returns {string} \"RS\" or \"LS\".\n\t * @function AirplaneFuselageLocation#getBLSideString\n\t */\n\tAirplaneFuselageLocation.prototype.getBLSideString = function () {\n\t\treturn this.BBL < 0 ? 'LS' : this.BBL > 0 ? 'RS' : '';\n\t}\n\n\t/**\n\t * Returns a string representation of the object.\n\t * @returns {string} A string of the following form: \"BSTA=..., BBL=..., BWL=...\".\n\t * @function AirplaneFuselageLocation#toString\n\t */\n\tAirplaneFuselageLocation.prototype.toString = defaultToString;\n\n\t/**\n\t * Constructs a new SectionZones object.\n\t * @classdesc Represents a set of the maintenance zones in the airplane section.\n\t * @param {string} xmlURL - The URL of the XML document which describes the maintenance zones for the airplane section if the xmlAutoload argument is <i>true</i>.\n\t * @param {string} wrlURL - The URL of the VRML file which contains the geometry of the maintenance zones.\n\t * @class\n\t * @name SectionZones\n\t */\n\tfunction SectionZones(xmlURL, wrlURL) {\n\t\tlet pendingVisibleZones = [],\n\t\t\tsection = null;\n\n\t\tfunction setZoneVisibility(doc, zoneID, visible) {\n\t\t\tif (!section || !section._peer)\n\t\t\t\treturn;\n\t\t\tconst zone = doc ? doc.selectSingleNode(`//zone[@id=\"${zoneID}\"]`) : null;\n\t\t\tif (zone) {\n\t\t\t\tconst shapes = zone.selectNodes('shape/text()');\n\t\t\t\tif (shapes.length) {\n\t\t\t\t\tconst names = [];\n\t\t\t\t\tfor (let i = 0; i < shapes.length; ++i)\n\t\t\t\t\t\tnames.push(shapes[i].nodeValue);\n\t\t\t\t\tModule.ccall('stella_section_setZoneVisibility', 'null', ['number', 'string', 'number'], [section._peer, names.join(' '), visible]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperties(this, {\n\t\t\t'_document': { value: null, writable: true },\n\t\t\t'_url': { value: wrlURL },\n\t\t\t'_attachToSection': {\n\t\t\t\tvalue: function (toSection) {\n\t\t\t\t\tsection = toSection;\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * The section which contains this maintenance zone collection.\n\t\t\t * @type ?Section\n\t\t\t * @readonly\n\t\t\t * @name SectionZones#section\n\t\t\t * @see Section#zones\n\t\t\t */\n\t\t\t'section': { \n\t\t\t\tget: function () { return section; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Specifies whether the section zone set is loaded.\n\t\t\t * @type boolean\n\t\t\t * @readonly\n\t\t\t * @name SectionZones#isLoaded\n\t\t\t */\n\t\t\t'isLoaded': {\n\t\t\t\tget: function () { return !pendingVisibleZones; },\n\t\t\t\tenumerable: true\n\t\t\t},\n\t\t\t/**\n\t\t\t * Shows the geometry of the zone.\n\t\t\t * @param {string} zoneID - The identifier of the zone.\n\t\t\t * @function SectionZones#showZone\n\t\t\t */\n\t\t\t'showZone': {\n\t\t\t\tvalue: function (zoneID) {\n\t\t\t\t\tif (pendingVisibleZones)\n\t\t\t\t\t\tpendingVisibleZones.push(zoneID);\n\t\t\t\t\telse\n\t\t\t\t\t\tsetZoneVisibility(this._document, zoneID, true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * Hides the geometry of the zone.\n\t\t\t * @param {string} zoneID - The identifier of the zone.\n\t\t\t * @function SectionZones#hideZone\n\t\t\t */\n\t\t\t'hideZone': {\n\t\t\t\tvalue: function (zoneID) {\n\t\t\t\t\tif (pendingVisibleZones) {\n\t\t\t\t\t\tconst i = pendingVisibleZones.indexOf(zoneID);\n\t\t\t\t\t\tif (i >= 0)\n\t\t\t\t\t\t\tpendingVisibleZones.splice(i, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetZoneVisibility(this._document, zoneID, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t'_load': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tif (this._document)\n\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\tconst zones = this;\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tloadXMLDocument(xmlURL,\n\t\t\t\t\t\t\tfunction (document) {\n\t\t\t\t\t\t\t\tzones._document = document;\n\t\t\t\t\t\t\t\tzones._didFinishLoad();\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfunction (errorText) {\n\t\t\t\t\t\t\t\treject(new Error(errorText));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t'_unload': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tpendingVisibleZones = [];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t'_didFinishLoad': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\tif (section && section._state.loaded && pendingVisibleZones) {\n\t\t\t\t\t\tfor (const zone of pendingVisibleZones)\n\t\t\t\t\t\t\tsetZoneVisibility(this._document, zone, true);\n\t\t\t\t\t\tpendingVisibleZones = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tObject.defineProperties(SectionZones.prototype, {\n\t\t/**\n\t\t * Returns an array of strings with the identifiers of all zones of the section.\n\t\t * @returns {string[]} An array of strings.\n\t\t * @function SectionZones#getAllZones\n\t\t */\n\t\t'getAllZones': {\n\t\t\tvalue: function () {\n\t\t\t\tconst zones = [];\n\t\t\t\tif (this._document) {\n\t\t\t\t\tconst nodes = this._document.selectNodes(\"//zone\");\n\t\t\t\t\tfor (let i = 0; i < nodes.length; ++i)\n\t\t\t\t\t\tzones.push(nodes[i].getAttribute('id'));\n\t\t\t\t}\n\t\t\t\treturn zones;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Returns the unique identifier of zone (Zone ID) which contains\n\t\t * the point with the coordinates of the given object. \n\t\t * Returns <i>null</i>, if point does not belong to any of the zones.\n\t\t * <br><br>\n\t\t * The second parameter, if specified, is used to increase the accuracy and speed of the zone detection.\n\t\t * In this case, the search will only be performed on the zones containing the structure element with the given identifier.\n\t\t * @param {(Vec3f|RepairDot)} object - The {@link Vec3f} or {@link RepairDot} object.\n\t\t * @param {string} [elementName] - The unique identifier of the structure element that the given point belongs to. The parameter is optional.\n\t\t * @returns {?string} The unique identifier of the zone or <i>null</i>.\n\t\t * @function SectionZones#getZone\n\t\t */\n\t\t'getZone': {\n\t\t\tvalue: function (object, elementName) {\n\t\t\t\tif (this._document) {\n\t\t\t\t\tconst hasElementName = (typeof (elementName) !== 'undefined' && elementName != ''),\n\t\t\t\t\t\tzonesWithItem = this._document.selectNodes(hasElementName ? `//zone[zoneitems/item/text()=\"${elementName}\"]` : '//zone');\n\t\t\t\t\tif (zonesWithItem.length > 0) {\n\t\t\t\t\t\tlet point;\n\t\t\t\t\t\tif (object.constructor === Vec3f)\n\t\t\t\t\t\t\tpoint = object;\n\t\t\t\t\t\telse if (object.constructor === RepairDot)\n\t\t\t\t\t\t\tpoint = object.location;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\tconst x = point.x,\n\t\t\t\t\t\t\ty = point.y,\n\t\t\t\t\t\t\tz = point.z;\n\t\t\t\t\t\tfor (let i = 0; i < zonesWithItem.length; ++i) {\n\t\t\t\t\t\t\tconst boxes = zonesWithItem[i].selectNodes('boxes/box');\n\t\t\t\t\t\t\tfor (let j = 0; j < boxes.length; ++j) {\n\t\t\t\t\t\t\t\tconst planes = boxes[j].selectNodes('plane');\n\t\t\t\t\t\t\t\tlet inside = true;\n\t\t\t\t\t\t\t\tfor (let k = 0; k < planes.length; ++k) {\n\t\t\t\t\t\t\t\t\tconst p = planes[k];\n\t\t\t\t\t\t\t\t\tif (p.getAttribute('a') * x + p.getAttribute('b') * y + p.getAttribute('c') * z > p.getAttribute('d')) {\n\t\t\t\t\t\t\t\t\t\tinside = false;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (inside)\n\t\t\t\t\t\t\t\t\treturn zonesWithItem[i].getAttribute('id');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (hasElementName) {\n\t\t\t\t\t\t\tlet nearestZone = null,\n\t\t\t\t\t\t\t\tshortestDistance = 100;\n\t\t\t\t\t\t\tfor (let i = 0; i < zonesWithItem.length; ++i) {\n\t\t\t\t\t\t\t\tlet boxDistance = 101;\n\t\t\t\t\t\t\t\tconst boxes = zonesWithItem[i].selectNodes('boxes/box');\n\t\t\t\t\t\t\t\tfor (let j = 0; j < boxes.length; ++j) {\n\t\t\t\t\t\t\t\t\tlet acceptablePlanes = 0;\n\t\t\t\t\t\t\t\t\tconst planes = boxes[j].selectNodes('plane');\n\t\t\t\t\t\t\t\t\tfor (let k = 0; k < planes.length; ++k) {\n\t\t\t\t\t\t\t\t\t\tconst p = planes[k],\n\t\t\t\t\t\t\t\t\t\t\td = p.getAttribute('a') * x + p.getAttribute('b') * y + p.getAttribute('c') * z - p.getAttribute('d');\n\t\t\t\t\t\t\t\t\t\tif (d <= 0)\n\t\t\t\t\t\t\t\t\t\t\tacceptablePlanes++;\n\t\t\t\t\t\t\t\t\t\telse if (boxDistance > d)\n\t\t\t\t\t\t\t\t\t\t\tboxDistance = d;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ((acceptablePlanes == planes.length - 1) && shortestDistance > boxDistance) {\n\t\t\t\t\t\t\t\t\t\tshortestDistance = boxDistance;\n\t\t\t\t\t\t\t\t\t\tnearestZone = zonesWithItem[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (nearestZone)\n\t\t\t\t\t\t\t\treturn nearestZone.getAttribute('id');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns an array of strings containing identifiers of the all structure elements, which belong to the zone.\n\t\t * @param {string} zoneID - The identifier of the zone.\n\t\t * @returns {string[]} An array of strings.\n\t\t * @function SectionZones#getAllElementsInZone\n\t\t */\n\t\t'getAllElementsInZone': {\n\t\t\tvalue: function (zoneID) {\n\t\t\t\tconst elements = [];\n\t\t\t\tif (this._document) {\n\t\t\t\t\tconst nodes = this._document.selectNodes(`//zone[@id=\"${zoneID}\"]/zoneitems/item/text()`);\n\t\t\t\t\tfor (let i = 0; i < nodes.length; ++i)\n\t\t\t\t\t\telements.push(nodes[i].nodeValue);\n\t\t\t\t}\n\t\t\t\treturn elements;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Constructs a new Metadata object.\n\t * @classdesc This class is used for work with an airplane VRML model metadata.<br>\n\t * @class\n\t * @name Metadata\n\t */\n\tfunction Metadata() {\n\t\tthis.dom = null;\n\t}\n\n\t/**\n\t * Converts the airplane section code to the airplane section identifier.\n\t * @param {string} sectionCode - The airplane section code.\n\t * @returns {?string} An airplane section ID (the \"id\" attribute of the \"section\" element).\n\t * @function Metadata#sectionCodeToId\n\t */\n\tMetadata.prototype.sectionCodeToId = function (sectionCode) {\n\t\tlet id = null;\n\t\tif (this.isAvailable()) {\n\t\t\ttry {\n\t\t\t\tid = this.dom.selectSingleNode(`(//section | //fullbird)[@code=\"${sectionCode}\"]`).getAttribute('id');\n\t\t\t} catch (exception) { }\n\t\t\tif (!id) {\n\t\t\t\ttry {\n\t\t\t\t\tid = this.dom.selectSingleNode(`/airplane/fullbird//item[.=\"${sectionCode}\"]`).getAttribute('ref');\n\t\t\t\t} catch (exception) { }\n\t\t\t}\n\t\t\tif (!id)\n\t\t\t\tid = this.dom.selectSingleNode('/airplane/fullbird').getAttribute('id');\n\t\t}\n\t\treturn id;\n\t}\n\n\t/**\n\t * Converts the airplane section identifier to airplane section code.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @returns {?string} An airplane section code.\n\t * @function Metadata#sectionIdToCode\n\t */\n\tMetadata.prototype.sectionIdToCode = function (sectionID) {\n\t\tlet code = null;\n\t\tif (this.isAvailable()) {\n\t\t\ttry {\n\t\t\t\tcode = this.dom.selectSingleNode(`(//fullbird | //section)[@id=\"${sectionID}\"]`).getAttribute('code');\n\t\t\t} catch (exception) {}\n\t\t\tif (!code) {\n\t\t\t\ttry {\n\t\t\t\t\tcode = this.dom.selectSingleNode(`/airplane/fullbird//item[@ref=\"${sectionID}\"]/text()`).nodeValue;\n\t\t\t\t} catch (exception) {}\n\t\t\t}\n\t\t\tif (!code)\n\t\t\t\tcode = 'FULLBIRD_SECTION_MAP';\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * Indicates whether the metadata XML is loaded successfully.\n\t * @returns {boolean} Returns a boolean value that indicates whether the metadata is loaded successfully.\n\t * @function Metadata#isAvailable\n\t */\n\tMetadata.prototype.isAvailable = function () {\n\t\treturn this.dom && this.dom.documentElement;\n\t}\n\n\tfunction loadXMLDocument(url, onload, onerror) {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open('GET', url, true);\n\t\txhr.responseType = 'document';\n\t\txhr.overrideMimeType('text/xml');\n\t\txhr.onload = function () {\n\t\t\tconst success = xhr.status == 200 && xhr.responseXML;\n\t\t\tif (success) {\n\t\t\t\tonload(xhr.responseXML);\n\t\t\t} else if (typeof (onerror) === 'function') {\n\t\t\t\tonerror(xhr.status != 200 ? xhr.statusText + ' (status code: ' + xhr.status + ')' : \"Malformed XML\");\n\t\t\t}\n\t\t}\n\t\txhr.onerror = function () {\n\t\t\tif (typeof (onerror) === 'function')\n\t\t\t\tonerror(xhr.statusText + ' (status code: ' + xhr.status + ')');\n\t\t}\n\t\txhr.send();\n\t}\n\n\t/**\n\t * Loads the metadata XML document from the specified location.\n\t * @returns {Promise}\n\t * @function Metadata#load\n\t */\n\tMetadata.prototype.load = function (url) {\n\t\tthis.base_path = url.replace(/[^\\\\\\\\/]+$/, '');\n\t\tconst self = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tloadXMLDocument(url,\n\t\t\t\tfunction (document) {\n\t\t\t\t\tself.dom = document;\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t\tfunction (errorMessage) {\n\t\t\t\t\treject(new Error(errorMessage));\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the offset of the airplane section.\n\t * @param {string} sectionCode - The VRML section code.\n\t * @returns {AirplaneFuselageLocation} The coordinates of the section offset.\n\t * @function Metadata#getOffsetForSection\n\t * @deprecated Use {@link Metadata#getSectionOffset} instead.\n\t */\n\tMetadata.prototype.getOffsetForSection = function (sectionCode) {\n\t\treturn this.getSectionOffset(this.sectionCodeToId(sectionCode));\n\t}\n\n\t/**\n\t * Returns the offset of the airplane section.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @returns {AirplaneFuselageLocation} The coordinates of the section offset.\n\t * @function Metadata#getSectionOffset\n\t */\n\tMetadata.prototype.getSectionOffset = function (sectionID) {\n\t\tlet bsta = 0,\n\t\t\tbwl = 0,\n\t\t\tbbl = 0;\n\t\tif (this.isAvailable() && sectionID) {\n\t\t\tconst section = this.dom.selectSingleNode('//section[@id=\"' + sectionID + '\"]');\n\t\t\tif (section) {\n\t\t\t\tbsta = floatAttribute(section, 'offset-bsta');\n\t\t\t\tbwl = floatAttribute(section, 'offset-bwl');\n\t\t\t\tbbl = floatAttribute(section, 'offset-bbl');\n\t\t\t}\n\t\t}\n\t\treturn new AirplaneFuselageLocation(bsta, bwl, bbl);\n\t}\n\t/**\n\t * Transforms the Airplane Fuselage coordinates to the VRML coordinates based on the information about the offset of the airplane section.\n\t * @param {AirplaneFuselageLocation} airplaneFuselageLocation - The object representing the airplane fuselage coordinates.\n\t * @returns {Vec3f} A location of the repair dot in the VRML coordinates.\n\t * @function Metadata#coordAirplaneFuselageToVRML\n\t */\n\tMetadata.prototype.coordAirplaneFuselageToVRML = function (airplaneFuselageLocation) {\n\t\tconst k = Model3D.instance.AC_SCALE_FACTOR,\n\t\t\tx = -airplaneFuselageLocation.BBL / k,\n\t\t\ty = airplaneFuselageLocation.BWL / k,\n\t\t\tz = -airplaneFuselageLocation.BSTA / k;\n\t\treturn new Vec3f(x, y, z);\n\t}\n\n\t/**\n\t * Transforms the VRML coordinates to the Airplane Fuselage coordinates based on the information about the offset of the airplane section.\n\t * @param {Vec3f} location - An object representing the VRML coordinates.\n\t * @returns {AirplaneFuselageLocation} An Airplane Fuselage coordinates of the repair dot.\n\t * @function Metadata#coordVRMLToAirplaneFuselage\n\t */\n\tMetadata.prototype.coordVRMLToAirplaneFuselage = function (location) {\n\t\tconst k = Model3D.instance.AC_SCALE_FACTOR,\n\t\t\tbsta = -location.z * k,\n\t\t\tbwl = location.y * k,\n\t\t\tbbl = -location.x * k;\n\n\t\treturn new AirplaneFuselageLocation(bsta, bwl, bbl);\n\t}\n\n\t/**\n\t * Converts the actual BSTA coordinate to a string representation appropriate for the current airplane.\n\t * Performs all calculations to separate the \"base\" value and the \"additional\" value and adds\n\t * the corresponding letter, if the airplane uses the \"letter\" convention.\n\t * <br>\n\t * The following cases are possible:\n\t * <ul>\n\t * <li>If the airplane is not a derivative model, or if the coordinate does not belong to \"inserted\" blocks,\n\t *     then the returned string contains only a number, e.g. \"300\". Note that this number can differ from the\n\t *     actual coordinate if the coordinate is \"behind\" one or more \"inserted\" blocks.\n\t * <li>If the coordinate coincides with the coordinate of an \"inserted\" frame, then the returned value\n\t *     corresponds to the name of this frame, e.g. \"500+40\" for airplanes using the \"plus\" convention or\n\t *     \"500B\" for airplanes using the \"letter\" convention.\n\t * <li>If the coordinate belongs to an \"inserted\" block but does not coincide with any frame, then the\n\t *     returned value takes the form \"500+43\" for airplanes using the \"plus\" convention or \"500B+3\" for\n\t *     airplanes using the \"letter\" convention.\n\t * </ul>\n\t * @param {number} bsta Tha actual BSTA coordinate, e.g. taken from the {@link AirplaneFuselageLocation} object.\n\t * @param {number} precision The number of fractional digits to be returned.\n\t * @returns {string} A string representation of the coordinate appropriate for the current airplane.\n\t * @function Metadata#coordBSTAToExtendedBSTA\n\t */\n\tMetadata.prototype.coordBSTAToExtendedBSTA = function (bsta, precision) {\n\t\ttry {\n\t\t\tconst insertions = this.dom.selectNodes('airplane/fuselage-coordinates/*');\n\t\t\tfor (let i = 0; i < insertions.length; ++i) {\n\t\t\t\tconst ins = insertions[i],\n\t\t\t\t\tlastBefore = parseFloat(ins.getAttribute('last-before')),\n\t\t\t\t\tfirstAfter = parseFloat(ins.getAttribute('first-after')),\n\t\t\t\t\tdist = parseFloat(ins.getAttribute('first-inserted-distance'));\n\n\t\t\t\tif (bsta < lastBefore)\n\t\t\t\t\treturn bsta.toFixed(precision);\n\n\t\t\t\tif (ins.tagName == 'insertion-plus') {\n\t\t\t\t\tconst size = parseFloat(ins.getAttribute('size'));\n\t\t\t\t\tif (bsta < firstAfter + size) {\n\t\t\t\t\t\tconst delta = bsta - lastBefore;\n\t\t\t\t\t\tlet str = '+' + delta.toFixed(precision);\n\t\t\t\t\t\tif (str == '+0')\n\t\t\t\t\t\t\tstr = '';\n\t\t\t\t\t\treturn lastBefore.toFixed(precision) + str;\n\t\t\t\t\t}\n\t\t\t\t\tbsta -= size;\n\t\t\t\t} else if (ins.tagName == 'insertion-letter') {\n\t\t\t\t\tlet offset = bsta - lastBefore;\n\t\t\t\t\tif (offset < dist) {\n\t\t\t\t\t\tstr = '+' + offset.toFixed(precision);\n\t\t\t\t\t\tif (str == '+0')\n\t\t\t\t\t\t\tstr = '';\n\t\t\t\t\t\treturn lastBefore.toFixed(precision) + str;\n\t\t\t\t\t}\n\t\t\t\t\toffset -= dist;\n\n\t\t\t\t\tconst frames = ins.selectNodes('inserted-frame');\n\t\t\t\t\tfor (let j = 0; j < frames.length; ++j) {\n\t\t\t\t\t\tconst delta = parseFloat(frames[j].getAttribute('distance-to-next'));\n\t\t\t\t\t\tif (offset < delta) {\n\t\t\t\t\t\t\tlet str = '+' + offset.toFixed(precision);\n\t\t\t\t\t\t\tif (str == '+0')\n\t\t\t\t\t\t\t\tstr = '';\n\t\t\t\t\t\t\treturn lastBefore.toFixed(precision) + frames[j].getAttribute('letter') + str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\toffset -= delta;\n\t\t\t\t\t}\n\n\t\t\t\t\tbsta = firstAfter + offset;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) { }\n\n\t\treturn bsta.toFixed(precision);\n\t}\n\n\t/**\n\t * Converts a string representation of the BSTA coordinate to the actual numeric BSTA value. A string\n\t * representation must follow the convention of the current airplane. The returned value can be used to\n\t * construct an {@link AirplaneFuselageLocation} object. If the string uses the wrong convention and\n\t * cannot be parsed, -1 is returned.\n\t * <br>\n\t * The following patterns are supported:\n\t * <ul>\n\t * <li>Simple number: \"300\".\n\t * <li>For airplanes using the \"plus\" convention: \"500+43\".\n\t * <li>For airplanes using the \"letter\" convention: \"500B\".\n\t * <li>For airplanes using the \"letter\" convention: \"500B+3\".\n\t * </ul>\n\t * @param {string} bsta - A string representation of the BSTA coordinate appropriate for the current airplane.\n\t * @returns {number} Actual BSTA coordinate that can be used to construct an {@link AirplaneFuselageLocation} object,\n\t *          or -1 if the input string can't be parsed according to the current airplane convention.\n\t * @function Metadata#coordExtendedBSTAToBSTA\n\t */\n\tMetadata.prototype.coordExtendedBSTAToBSTA = function (bsta) {\n\t\ttry {\n\t\t\tconst arr = String(bsta).toUpperCase().replace(\",\", \".\").replace(/ /g, \"\").split(\"+\");\n\t\t\tif (arr.length != 1 && arr.length != 2)\n\t\t\t\treturn -1;\n\n\t\t\tlet base = parseFloat(arr[0]);\n\t\t\tif (isNaN(base))\n\t\t\t\treturn -1;\n\n\t\t\tlet plus = 0;\n\t\t\tif (arr.length == 2) {\n\t\t\t\tplus = parseFloat(arr[1]);\n\t\t\t\tif (isNaN(plus))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tlet srcLetter = arr[0].substring(arr[0].length - 1);\n\t\t\tif (srcLetter < \"A\" || srcLetter > \"Z\")\n\t\t\t\tsrcLetter = \"\";\n\n\t\t\tlet foundPlus = false,\n\t\t\t\tfoundLetter = false;\n\t\t\tconst insertions = this.dom.selectNodes(\"airplane/fuselage-coordinates/*\");\n\t\t\tfor (let i = insertions.length - 1; i >= 0; --i) {\n\t\t\t\tconst ins = insertions[i],\n\t\t\t\t\tlastBefore = parseFloat(ins.getAttribute(\"last-before\")),\n\t\t\t\t\tfirstAfter = parseFloat(ins.getAttribute(\"first-after\")),\n\t\t\t\t\tdist = parseFloat(ins.getAttribute(\"first-inserted-distance\"));\n\t\t\t\tif (ins.tagName == \"insertion-plus\") {\n\t\t\t\t\tif (base >= firstAfter)\n\t\t\t\t\t\tbase += parseFloat(ins.getAttribute(\"size\"));\n\t\t\t\t\telse if (base >= lastBefore)\n\t\t\t\t\t\tfoundPlus = true;\n\t\t\t\t} else if (ins.tagName == \"insertion-letter\") {\n\t\t\t\t\tconst frames = ins.selectNodes(\"inserted-frame\");\n\t\t\t\t\tif (base >= firstAfter) {\n\t\t\t\t\t\tbase -= firstAfter - lastBefore;\n\t\t\t\t\t\tbase += dist;\n\t\t\t\t\t\tfor (let j = frames.length - 1; j >= 0; --j)\n\t\t\t\t\t\t\tbase += parseFloat(frames[j].getAttribute(\"distance-to-next\"));\n\t\t\t\t\t} else if (base >= lastBefore) {\n\t\t\t\t\t\tif (srcLetter == \"\")\n\t\t\t\t\t\t\tfoundPlus = true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbase += dist;\n\n\t\t\t\t\t\tfor (let j = frames.length - 1; j >= 0; --j) {\n\t\t\t\t\t\t\tconst width = parseFloat(frames[j].getAttribute(\"distance-to-next\")),\n\t\t\t\t\t\t\t\tletter = frames[j].getAttribute(\"letter\");\n\t\t\t\t\t\t\tif (srcLetter == letter) {\n\t\t\t\t\t\t\t\tfoundPlus = true;\n\t\t\t\t\t\t\t\tfoundLetter = true;\n\t\t\t\t\t\t\t} else if (srcLetter > letter) {\n\t\t\t\t\t\t\t\tbase += width;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (plus != 0 && !foundPlus || srcLetter != \"\" && !foundLetter)\n\t\t\t\treturn -1;\n\n\t\t\treturn base + plus;\n\t\t} catch (e) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the bounding box of the airplane section.\n\t * @param {string} sectionCode - The airplane section code.\n\t * @returns {AirplaneBoundBox} An airplane section bounding box.\n\t * @function Metadata#getSectionBB\n\t * @deprecated Use {@link Model3D#getSectionBoundingBox} instead.\n\t */\n\tMetadata.prototype.getSectionBB = function (sectionCode) {\n\t\treturn this.getSectionBoundingBox(this.sectionCodeToId(sectionCode));\n\t}\n\n\t/**\n\t * Gets the bounding box of the airplane section.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @returns {AirplaneBoundBox} An airplane section bounding box.\n\t * @function Metadata#getSectionBB\n\t */\n\tMetadata.prototype.getSectionBoundingBox = function (sectionID) {\n\t\tconst bbox = new AirplaneBoundBox();\n\t\tif (this.isAvailable() && sectionID) {\n\t\t\tconst section = this.dom.selectSingleNode('//section[@id=\"' + sectionID + '\"]');\n\t\t\ttry {\n\t\t\t\tbbox.fromXMLNode(section.selectSingleNode('boundbox'));\n\t\t\t} catch (e) { }\n\t\t}\n\t\treturn bbox;\n\t}\n\t\n\t/**\n\t * Finds all airplane sections for which the specified location could be valid.\n\t * @param {AirplaneFuselageLocation} airplaneFuselageLocation - An object representing the airplane fuselage coordinates.\n\t * @returns {string[]} An array of strings containing section codes of the airplane sections for which the specified location could be valid.\n\t * @function Metadata#getAirplaneSectionsForLocation\n\t */\n\tMetadata.prototype.getAirplaneSectionsForLocation = function (airplaneFuselageLocation) {\n\t\tconst result = [];\n\t\tif (this.isAvailable()) {\n\t\t\tconst sections = this.dom.selectNodes('//section');\n\t\t\tfor (let i = 0; i < sections.length; ++i) {\n\t\t\t\tconst sectionID = sections[i].getAttribute('id');\n\t\t\t\tif (this.getSectionBoundingBox(sectionID).isInside(airplaneFuselageLocation))\n\t\t\t\t\tresult.push(this.sectionIdToCode(sectionID));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Finds all airplane fuselage sections for which the specified location could be valid.\n\t * @param {AirplaneFuselageLocation} airplaneFuselageLocation - An object representing the airplane fuselage coordinates.\n\t * @returns {string[]} An array of strings containing section codes of the airplane fuselage sections for which the specified location could be valid.\n\t * @function Metadata#getFuselageSectionsForLocation\n\t */\n\tMetadata.prototype.getFuselageSectionsForLocation = function (airplaneFuselageLocation) {\n\t\tconst result = [];\n\t\tif (this.isAvailable()) {\n\t\t\tconst sections = this.dom.selectNodes('//section');\n\t\t\tfor (let i = 0; i < sections.length; ++i) {\n\t\t\t\tconst sectionID = sections[i].getAttribute('id');\n\t\t\t\tif (sectionID.indexOf('_FUS_') >= 0 || sectionID.indexOf('_C') >= 0) {\n\t\t\t\t\tif (this.getSectionBoundingBox(sectionID).isInside(airplaneFuselageLocation))\n\t\t\t\t\t\tresult.push(this.sectionIdToCode(sectionID));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the viewpoint object that is suitable for a repair dot to be observed.\n\t * @param {Vec3f} location - An object representing VRML coordinates.\n\t * @param {string} sectionCode - The airplane section code.\n\t * @returns {Viewpoint} A Viewpoint object.\n\t * @function Metadata#chooseViewpoint\n\t */\n\tMetadata.prototype.chooseViewpoint = function (location, sectionCode) {\n\t\tconst cv = this.coordAirplaneFuselageToVRML(this.getSectionBB(sectionCode).center, sectionCode),\n\t\t\tsp = stackSave(),\n\t\t\tdata = stackAlloc(28),\n\t\t\tkRatio = 3,\n\t\t\tviewpoint = new Viewpoint();\n\n\t\tfloat3_fromObject(data, location);\n\t\tfloat3_fromVec3f(data + 12, cv);\n\t\tHEAPF32[(data >> 2) + 6] = kRatio;\n\n\t\tModule._stella_utility_getBestViewpoint(data);\n\n\t\tviewpoint.position = float3_asVec3f(data);\n\t\tviewpoint.orientation = float4_asRotation(data + 12);\n\t\tviewpoint.center = location;\n\t\tstackRestore(sp);\n\t\treturn viewpoint;\n\t}\n\n\t/**\n\t * Returns the ATA items (Section or Unit) which are associated with the structure elements in the zone.\n\t * @param {SectionZones} sectionZones - The SectionZones object.\n\t * @param {string} zoneID - The identifier of the zone.\n\t * @returns {ATA[]} An array of the {@link ATA} objects.\n\t * @function Metadata#getATAForZone\n\t */\n\tMetadata.prototype.getATAForZone = function (sectionZones, zoneID) {\n\t\tif (!this.dom)\n\t\t\treturn [];\n\t\tconst assoc = Object.create(null),\n\t\t\tsectionID = sectionZones.getSectionId(),\n\t\t\telements = sectionZones.getAllElementsInZone(zoneID),\n\t\t\tsectionNode = this.dom.selectSingleNode(\"//section[@id='\" + sectionID + \"']\");\n\t\tfor (let i = 0; i < elements.length; ++i) {\n\t\t\tconst nodes = sectionNode.selectNodes(\".//item[.='\" + elements[i] + \"']\");\n\t\t\tfor (let j = 0; j < nodes.length; ++j) {\n\t\t\t\tconst value = nodes[j].getAttribute('ATA');\n\t\t\t\tif (value != null)\n\t\t\t\t\tassoc[value] = true;\n\t\t\t}\n\t\t}\n\n\t\tconst ata = Object.keys(assoc);\n\t\tata.sort();\n\t\tfor (let i = 0; i < ata.length; ++i) {\n\t\t\tconst value = this.dom.selectSingleNode(\"//atadescription[@ATA='\" + ata[i] + \"']/text()\");\n\t\t\tata[i] = new ATA(ata[i], value ? value.nodeValue : \"\");\n\t\t}\n\t\treturn ata;\n\t}\n\n\t/**\n\t * Returns the description for the airplane section with specified section ID.\n\t * @param {string} name - The item name.\n\t * @returns {?string} A description of the item or <i>null</i> if the item does not exist.\n\t * @function Metadata#getItemDescription\n\t */\n\tMetadata.prototype.getItemDescription = function (name) {\n\t\tconst item = this.dom.selectSingleNode('//item[text()=\"' + name + '\"]');\n\t\treturn item ? item.getAttribute(\"description\") : null;\n\t}\n\n\t/**\n\t * Returns the midpoints for the airplane section with specified section ID.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @returns {?Vec3f[]} An array of Vec3f objects.\n\t * @function Metadata#getSectionMidpoints\n\t * @see Section#midpoints\n\t */\n\tMetadata.prototype.getSectionMidpoints = function (sectionID) {\n\t\tif (!this.isAvailable())\n\t\t\treturn null;\n\n\t\tconst nodes = this.dom.selectNodes('//section[@id=\"' + sectionID + '\"]/midpoints/midpoint');\n\t\tif (!nodes || nodes.length == 0)\n\t\t\treturn [];\n\n\t\tconst midpoints = [];\n\t\tnodes.forEach(node => {\n\t\t\tmidpoints.push(new Vec3f(\n\t\t\t\t-floatAttribute(node, 'bbl'),\n\t\t\t\tfloatAttribute(node, 'bwl'),\n\t\t\t\t-floatAttribute(node, 'bsta'))\n\t\t\t);\n\t\t});\n\t\treturn midpoints;\n\t}\n\n\t/**\n\t * Returns the fasteners for the airplane section with specified section ID.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @returns An array of fastener objects.\n\t * @returns {Promise<Object[]>} `Promise` whose fulfillment handler receives an array of fastener objects.\n\t * @function Metadata#getSectionFasteners\n\t * @see Section#fasteners\n\t */\n\tMetadata.prototype.getSectionFasteners = function (sectionID) {\n\t\tif (!this.isAvailable())\n\t\t\treturn Promise.reject(new Error('Airplane metadata is not available'));\n\n\t\tconst fastenerdata = this.dom.selectSingleNode(`//section[@id=\"${sectionID}\"]/fastenerdata`);\n\t\tif (!fastenerdata)\n\t\t\treturn Promise.resolve([]);\n\n\t\tconst fastenerXMLPath = this.base_path + fastenerdata.getAttribute('src');\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tloadXMLDocument(fastenerXMLPath,\n\t\t\t\tfunction (document) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fasteners = [],\n\t\t\t\t\t\t\tmetasets = {};\n\t\t\t\t\t\tdocument.selectNodes('/fasteners/metasets/metaset').forEach(metasetNode => {\n\t\t\t\t\t\t\tconst name = metasetNode.getAttribute('id');\n\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\tconst metaset = {};\n\t\t\t\t\t\t\t\tmetasets[name] = metaset;\n\t\t\t\t\t\t\t\tmetasetNode.selectNodes('./meta').forEach(meta => {\n\t\t\t\t\t\t\t\t\tconst name = meta.getAttribute('name'),\n\t\t\t\t\t\t\t\t\t\tvalue = meta.getAttribute('value');\n\t\t\t\t\t\t\t\t\tif (name)\n\t\t\t\t\t\t\t\t\t\tmetaset[name] = value ? value : '';\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdocument.selectNodes('/fasteners/fastener').forEach(f => {\n\t\t\t\t\t\t\tconst metaset = f.getAttribute('metaset'),\n\t\t\t\t\t\t\t\tx = -floatAttribute(f, 'bbl'),\n\t\t\t\t\t\t\t\ty = floatAttribute(f, 'bwl'),\n\t\t\t\t\t\t\t\tz = -floatAttribute(f, 'bsta');\n\t\t\t\t\t\t\tfasteners.push(new Fastener(x, y, z, metaset ? metasets[metaset] : null, sectionID));\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(fasteners);\n\t\t\t\t\t} catch (exception) {\n\t\t\t\t\t\treject(new Error('Error loading fastener XML: ' + exception));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfunction (errorText) {\n\t\t\t\t\treject(new Error('Error loading fastener XML: ' + errorText));\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\tfunction floatAttribute(node, name) {\n\t\tconst v = node.getAttribute(name);\n\t\treturn v ? parseFloat(v) : 0;\n\t}\n\n\t/**\n\t * Constructs a new Fastener object.\n\t * @classdesc Represnts the fastener.\n\t * @param {number} x - The X coordinate of the fastener location.\n\t * @param {number} y - The Y coordinate of the fastener location.\n\t * @param {number} z - The Z coordinate of the fastener location.\n\t * @param {Object.<string,string>} metadata - Metadata associated with the fastener.\n\t * @param {string} sectionID - The unique identifier of the airplane section.\n\t * @class\n\t * @name Fastener\n\t */\n\tfunction Fastener(x, y, z, metadata, sectionID) {\n\t\tObject.defineProperties(this, {\n\t\t\t/**\n\t\t\t * The location of the fastener.\n\t\t\t * @type Vec3f\n\t\t\t * @readonly\n\t\t\t * @name Fastener#location\n\t\t\t */\n\t\t\t'location': { value: new Vec3f(x, y, z), enumerable: true },\n\t\t\t/**\n\t\t\t * Data associated with the fastener.\n\t\t\t * @type Object.<string, string>\n\t\t\t * @readonly\n\t\t\t * @name Fastener#metadata\n\t\t\t */\n\t\t\t'metadata': { value: metadata, enumerable: true },\n\t\t\t/**\n\t\t\t * Ths section ID to which the fastener belongs to.\n\t\t\t * @type string\n\t\t\t * @readonly\n\t\t\t * @name Fastener#sectionID\n\t\t\t */\n\t\t\t'sectionID': { value: sectionID, enumerable: true },\n\t\t\t'_projection': { value: x * .36 + y * .48 + z * .8 },\n\t\t\t/**\n\t\t\t * Returns a string representation of the fastener.\n\t\t\t * @returns {string}\n\t\t\t * @function Fastener#toString\n\t\t\t */\n\t\t\t'toString': {\n\t\t\t\tvalue: function () {\n\t\t\t\t\treturn `Fastener { location=[${this.location}], name=\"${this.metadata.name}\" }`;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Constructs a new ATA object.\n\t * @classdesc Represents information on the particular ATA item (Section or Unit).\n\t * @class\n\t * @name ATA\n\t */\n\tfunction ATA(ata, description) {\n\t\t/**\n\t\t * The ATA number.\n\t\t * @type string\n\t\t * @name ATA#ata\n\t\t */\n\t\tthis.ata = ata;\n\n\t\t/**\n\t\t * The ATA description.\n\t\t * @type string\n\t\t * @name ATA#description\n\t\t */\n\t\tthis.description = description;\n\t}\n\n\t/**\n\t * Returns a string representation of the object.\n\t * @returns {string}\n\t * @function ATA#toString\n\t */\n\tATA.prototype.toString = function () {\n\t\treturn this.ata + (this.description ? (' - ' + this.description) : '');\n\t}\n\n\t/**\n\t * Constructs a new Rotation object.\n\t * <br><br><dl>\n\t * <dt><b>new Rotation</b>(&lt;float&gt; x, &lt;float&gt; y, &lt;float&gt; z, <float> angle)</dt>\n\t * <dd>where<br>\n\t * x, y, and z are the axis of the rotation. angle is the angle of the rotation (in radians). Missing values default to 0.0, except y, which defaults to 1.0.\n\t * </dd>\n\t * </dl>\n\t * <br><dl>\n\t * <dt><b>new Rotation</b>(&lt;{@link Vec3f}&gt; axis, &lt;float&gt; angle)</dt>\n\t * <dd>where<br>\n\t * axis is the axis of rotation. angle is the angle of the rotation (in radians).\n\t * </dd>\n\t * </dl>\n\t * <br><dl>\n\t * <dt><b>new Rotation</b>(&lt;{@link Vec3f}&gt; fromVector, &lt;{@link Vec3f}&gt; toVector)</dt>\n\t * <dd>where<br>\n\t * fromVector and toVector are normalized and the rotation value that would rotate from the fromVector to the toVector is stored in the object.\n\t * </dd>\n\t * </dl>\n\t * @classdesc The Rotation object corresponds to a VRML SFRotation field. It has four numeric properties: x, y, z (the axis of rotation) and angle.<br>\n\t * @class\n\t * @name Rotation\n\t */\n\tfunction Rotation(/*axis, angle | fromVector, toVector | x, y, z, angle*/) {\n\t\tif (arguments.length == 4) {\n\t\t\t/**\n\t\t\t * The first value of the axis vector.\n\t\t\t * @type number\n\t\t\t * @name Rotation#x\n\t\t\t */\n\t\t\tthis.x = arguments[0];\n\t\t\t/**\n\t\t\t * The second value of the axis vector.\n\t\t\t * @type number\n\t\t\t * @name Rotation#y\n\t\t\t */\n\t\t\tthis.y = arguments[1];\n\t\t\t/**\n\t\t\t * The third value of the axis vector.\n\t\t\t * @type number\n\t\t\t * @name Rotation#z\n\t\t\t */\n\t\t\tthis.z = arguments[2];\n\t\t\t/**\n\t\t\t * The angle of the rotation (in radians).\n\t\t\t * @type float\n\t\t\t * @name Rotation#angle\n\t\t\t */\n\t\t\tthis.angle = arguments[3];\n\t\t} else if (arguments.length == 2) {\n\t\t\tif (typeof (arguments[1]) === 'number') {\n\t\t\t\tthis.setAxis(arguments[0]);\n\t\t\t\tthis.angle = arguments[1];\n\t\t\t} else {\n\t\t\t\tconst FLT_EPSILON = 1.192092896e-07,\n\t\t\t\t\tv = arguments[0].normalize(),\n\t\t\t\t\tv1 = arguments[1].normalize();\n\t\t\t\tlet axis = v.cross(v1),\n\t\t\t\t\tlen = axis.length();\n\t\t\t\tif (len <= FLT_EPSILON) {\n\t\t\t\t\tif (v.dot(v1) < 0.0) {\n\t\t\t\t\t\taxis = v.cross(new Vec3f(1, 0, 0));\n\t\t\t\t\t\tthis.angle = Math.PI;\n\t\t\t\t\t\tlen = axis.length();\n\t\t\t\t\t\tif (len <= FLT_EPSILON)\n\t\t\t\t\t\t\taxis = v.cross(new Vec3f(0, 1, 0));\n\t\t\t\t\t\taxis = axis.normalize();\n\t\t\t\t\t} else {\n\t\t\t\t\t\taxis = new Vec3f(0, 1, 0);\n\t\t\t\t\t\tthis.angle = 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.angle = Math.atan2(len, v.dot(v1));\n\t\t\t\t\taxis = axis.normalize();\n\t\t\t\t}\n\t\t\t\tthis.setAxis(axis);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 1;\n\t\t\tthis.z = 0;\n\t\t\tthis.angle = 0;\n\t\t}\n\t}\n\n\tObject.defineProperties(Rotation.prototype, {\n\t\t'toArray': {\n\t\t\t/**\n\t\t\t * Returns an array representing of the rotation object.\n\t\t\t * @returns {number[]} An array of four floats.\n\t\t\t * @function Rotation#toArray\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn [this.x, this.y, this.z, this.angle];\n\t\t\t}\n\t\t},\n\t\t'multVec': {\n\t\t\t/**\n\t\t\t * Returns a new vector object that is the given vector multiplied by the matrix corresponding to this rotation object.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Rotation#multVec\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\tconst e = -this.angle,\n\t\t\t\t\ts = Math.sin(e),\n\t\t\t\t\tc = Math.cos(e),\n\n\t\t\t\t\tf = this.x,\n\t\t\t\t\tg = this.y,\n\t\t\t\t\th = this.z,\n\n\t\t\t\t\tx = value.x,\n\t\t\t\t\ty = value.y,\n\t\t\t\t\tz = value.z,\n\n\t\t\t\t\tp = (f * x + g * y + h * z) * (1 - c),\n\n\t\t\t\t\tpx = f * p + c * x + s * (h * y - g * z),\n\t\t\t\t\tpy = g * p + c * y + s * (f * z - h * x),\n\t\t\t\t\tpz = h * p + c * z + s * (g * x - f * y);\n\t\t\t\treturn new Vec3f(px, py, pz);\n\t\t\t}\n\t\t},\n\t\t'inverse': {\n\t\t\t/**\n\t\t\t * Returns a new rotation object that is the inverse of this rotation object.\n\t\t\t * @returns {Rotation}\n\t\t\t * @function Rotation#inverse\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn new Rotation(this.x, this.y, this.z, -this.angle);\n\t\t\t}\n\t\t},\n\t\t'multiply': {\n\t\t\t/**\n\t\t\t * Returns a new rotation object that is this rotation object multiplied by the specified value.\n\t\t\t * @param {Rotation} value - The {@link Rotation} object.\n\t\t\t * @returns {Rotation}\n\t\t\t * @function Rotation#multiply\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\tconst angle = value.angle,\n\t\t\t\t\tSa = Math.sin(angle / 2),\n\t\t\t\t\tCa = Math.cos(angle / 2),\n\t\t\t\t\tAs = value.getAxis().multiply(Sa),\n\n\t\t\t\t\tSb = Math.sin(this.angle / 2),\n\t\t\t\t\tCb = Math.cos(this.angle / 2),\n\t\t\t\t\tBs = this.getAxis().multiply(Sb),\n\n\t\t\t\t\tCab = Ca * Cb - As.dot(Bs),\n\n\t\t\t\t\tABs = As.multiply(Cb).add(Bs.multiply(Ca)).add(Bs.cross(As)),\n\n\t\t\t\t\tmsq = ABs.x * ABs.x + ABs.y * ABs.y + ABs.z * ABs.z,\n\n\t\t\t\t\tresult = new Rotation(0, 0, 1, 0);\n\t\t\t\tif (msq != 0) {\n\t\t\t\t\tconst Sab = Math.sqrt(msq);\n\t\t\t\t\tresult.setAxis(ABs.divide(Sab));\n\t\t\t\t\tresult.angle = 2 * Math.atan2(Sab, Cab);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t},\n\t\t'setAxis': {\n\t\t\t/**\n\t\t\t * Sets the axis of rotation to the value passed in value.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @function Rotation#setAxis\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\tthis.x = value.x;\n\t\t\t\tthis.y = value.y;\n\t\t\t\tthis.z = value.z;\n\t\t\t}\n\t\t},\n\t\t'getAxis': {\n\t\t\t/**\n\t\t\t * Returns the axis of rotation.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Rotation#getAxis\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn new Vec3f(this.x, this.y, this.z);\n\t\t\t}\n\t\t},\n\t\t'toString': {\n\t\t\t/**\n\t\t\t * Returns a string representation of the rotation.\n\t\t\t * @returns {string}\n\t\t\t * @function Rotation#toString\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn this.x + ' ' + this.y + ' ' + this.z + ' ' + this.angle;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Constructs a new Vec3f object.\n\t * @classdesc Represents a vector of three floating-point components. Each component of the vector can be accessed using the x, y, and z properties.\n\t * @param {number} x - The first value of the vector.\n\t * @param {number} y - The second value of the vector.\n\t * @param {number} z - The third value of the vector.\n\t * @class\n\t * @name Vec3f\n\t */\n\tfunction Vec3f(x, y, z) {\n\t\t/**\n\t\t * The first value of the vector.\n\t\t * @type number\n\t\t * @name Vec3f#x\n\t\t */\n\t\tthis.x = x;\n\t\t/**\n\t\t * The second value of the vector.\n\t\t * @type number\n\t\t * @name Vec3f#y\n\t\t */\n\t\tthis.y = y;\n\t\t/**\n\t\t * The third value of the vector.\n\t\t * @type number\n\t\t * @name Vec3f#z\n\t\t */\n\t\tthis.z = z;\n\t}\n\n\tObject.defineProperties(Vec3f.prototype, {\n\t\t'toArray': {\n\t\t\t/**\n\t\t\t * Returns an array representation of the vector.\n\t\t\t * @returns {number[]} An array containing three floating-point numbers as its elements.\n\t\t\t * @function Vec3f#toArray\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn [this.x, this.y, this.z];\n\t\t\t}\n\t\t},\n\t\t'add': {\n\t\t\t/**\n\t\t\t * Returns a new vector object that is the component-wise sum of this vector and the specified vector.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#add\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn new Vec3f(value.x + this.x, value.y + this.y, value.z + this.z);\n\t\t\t}\n\t\t},\n\t\t'subtract': {\n\t\t\t/**\n\t\t\t * Returns a new vector object that is the component-wise subtract of this vector and the specified vector.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#subtract\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn new Vec3f(this.x - value.x, this.y - value.y, this.z - value.z);\n\t\t\t}\n\t\t},\n\t\t'dot': {\n\t\t\t/**\n\t\t\t * Returns the dot product of this vector and the specified vector.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @returns {float}\n\t\t\t * @function Vec3f#dot\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn (value.x * this.x + value.y * this.y + value.z * this.z);\n\t\t\t}\n\t\t},\n\t\t'cross': {\n\t\t\t/**\n\t\t\t * Returns the cross product of this vector and the specified vector.\n\t\t\t * @param {Vec3f} value - The {@link Vec3f} object.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#cross\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn new Vec3f(this.y * value.z - value.y * this.z, this.z * value.x - value.z * this.x, this.x * value.y - value.x * this.y);\n\t\t\t}\n\t\t},\n\t\t'divide': {\n\t\t\t/**\n\t\t\t * Returns the value of the object divided by the specified scalar value.\n\t\t\t * @param {number} value - The floating-point number.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#divide\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn new Vec3f(this.x / value, this.y / value, this.z / value);\n\t\t\t}\n\t\t},\n\t\t'multiply': {\n\t\t\t/**\n\t\t\t * Returns the value of the object multiplied by the specified scalar value.\n\t\t\t * @param {number} value - The floating-point number.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#multiply\n\t\t\t */\n\t\t\tvalue: function (value) {\n\t\t\t\treturn new Vec3f(this.x * value, this.y * value, this.z * value);\n\t\t\t}\n\t\t},\n\t\t'length': {\n\t\t\t/**\n\t\t\t * Returns the geometric length of this vector.\n\t\t\t * @returns {number}\n\t\t\t * @function Vec3f#length\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t\t}\n\t\t},\n\t\t'normalize': {\n\t\t\t/**\n\t\t\t * Returns the normalized vector (i.e. the unit vector in the same orientation as this vector).\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#normalize\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\tconst m = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t\t\treturn m == 0 ? new Vec3f(this.x, this.y, this.z) : this.divide(m);\n\t\t\t}\n\t\t},\n\t\t'negate': {\n\t\t\t/**\n\t\t\t * Returns the value of the component-wise negation of the object.\n\t\t\t * @returns {Vec3f}\n\t\t\t * @function Vec3f#negate\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn new Vec3f(-this.x, -this.y, -this.z);\n\t\t\t}\n\t\t},\n\t\t'distanceToSegment': {\n\t\t\t/**\n\t\t\t * Returns the distance between the point and a segment represented by the specified points.\n\t\t\t * @param {Vec3f} a - The one end point of the segment.\n\t\t\t * @param {Vec3f} b - The other end point of the segment.\n\t\t\t * @returns {number} \n\t\t\t * @function Vec3f#distanceToSegment\n\t\t\t */\n\t\t\tvalue: function (a, b) {\n\t\t\t\tconst p = this, \n\t\t\t\t\tabx = b.x - a.x,\n\t\t\t\t\taby = b.y - a.y,\n\t\t\t\t\tabz = b.z - a.z,\n\t\t\t\t\tapx = p.x - a.x,\n\t\t\t\t\tapy = p.y - a.y,\n\t\t\t\t\tapz = p.z - a.z;\n\t\t\t\tif ((apx * abx + apy * aby + apz * abz) <= 0)\n\t\t\t\t\treturn Math.sqrt(apx * apx + apy * apy + apz * apz);\n\t\t\n\t\t\t\tconst bpx = p.x - b.x,\n\t\t\t\t\tbpy = p.y - b.y,\n\t\t\t\t\tbpz = p.z - b.z;\n\t\t\t\tif ((bpx * abx + bpy * aby + bpz * abz) >= 0)\n\t\t\t\t\treturn Math.sqrt(bpx * bpx + bpy * bpy + bpz * bpz);\n\t\t\n\t\t\t\tconst cx = aby * apz - apy * abz,\n\t\t\t\t\tcy = abz * apx - apz * abx,\n\t\t\t\t\tcz = abx * apy - apx * aby;\n\t\t\t\treturn Math.sqrt((cx * cx + cy * cy + cz * cz) / (abx * abx + apy * aby + abz * abz));\n\t\t\t},\n\t\t},\n\t\t'toString': {\n\t\t\t/**\n\t\t\t * Returns a string representation of the vector.\n\t\t\t * @returns {string}\n\t\t\t * @function Vec3f#toString\n\t\t\t */\n\t\t\tvalue: function () {\n\t\t\t\treturn this.x + ' ' + this.y + ' ' + this.z;\n\t\t\t}\n\t\t}\n\t});\n\n\t//\n\t// Export:\n\t//\n\tObject.defineProperties(stella, {\n\t\t'RepairDot': { value: RepairDot, enumerable: true },\n\t\t'SectionFragment': { value: SectionFragment, enumerable: true },\n\t\t'Section': { value: Section, enumerable: true },\n\t\t'Structure': { value: Structure, enumerable: true },\n\t\t'Viewpoint': { value: Viewpoint, enumerable: true },\n\t\t'Model3D': { value: Model3D, enumerable: true },\n\t\t'ATA': { value: ATA, enumerable: true },\n\t\t'AirplaneFuselageLocation': { value: AirplaneFuselageLocation, enumerable: true },\n\t\t'AirplaneBoundBox': { value: AirplaneBoundBox, enumerable: true },\n\t\t'Metadata': { value: Metadata, enumerable: true },\n\t\t'SectionZones': { value: SectionZones, enumerable: true },\n\t\t'Fastener': { value: Fastener, enumerable: true },\n\t\t'Vec3f': { value: Vec3f, enumerable: true },\n\t\t'Rotation': { value: Rotation, enumerable: true },\n\n\t\t'didInitializeRuntime': {\n\t\t\tvalue: function () {\n\t\t\t}\n\t\t}\n\t});\n\n}(Stella));\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = Stella;\n"],"sourceRoot":""}